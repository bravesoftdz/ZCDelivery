unit Framework_Intf;

// ----------------------------------------------------------------------
//  This file was automatically generated by RemObjects SDK from a
//  RODL file downloaded from a server or associated with this project.
// 
//  Do not modify this file manually, or your changes will be lost when
//  it is regenerated the next time you update your RODL.
// ----------------------------------------------------------------------

{$I RemObjects.inc}

interface

uses
  {$IFDEF DELPHIXE2UP}System.SysUtils{$ELSE}SysUtils{$ENDIF},
  {$IFDEF DELPHIXE2UP}System.Classes{$ELSE}Classes{$ENDIF},
  {$IFDEF DELPHIXE2UP}System.TypInfo{$ELSE}TypInfo{$ENDIF},
  uROUri,
  uROProxy,
  uROExceptions,
  uROXMLIntf,
  uROClasses,
  uROTypes,
  uROClientIntf,
  uROAsync,
  uROEventReceiver, V_Sys_Materiel_Intf;

const LibraryUID = '{3CCB95A1-30E1-4DEA-8087-E0945BED46C6}';
const TargetNamespace = 'Framework';
const IFramework_IID: TGUID = '{6A65F984-D808-4C1C-A1B0-5B6D9E24571F}';
const Framework_EndPointURI = 'http://110.52.60.19:6690/Shares/Framework.asmx';
type
  { Forward declarations }
  IFramework = interface;
  IFramework_Async = interface;
  IFramework_AsyncEx = interface;
  CoFramework = class;
  CoFramework_Async = class;
  CoFramework_AsyncEx = class;
  TFramework_Proxy = class;
  TFramework_AsyncProxy = class;
  TFramework_AsyncProxyEx = class;

  IFramework = interface(IROService)
  ['{6a65f984-d808-4c1c-a1b0-5b6d9e24571f}']
    function GetBillID(const _MySoapHeader: MySoapHeader; const keyName: WideString_Optional): WideString_Optional;
    function P_Sale_SaleDeptByOrgID(const _MySoapHeader: MySoapHeader; const FOrganizationID: WideString_Optional; const FTypeID: WideString_Optional): WideString_Optional;
    function F_Sys_GetUserRetrieveOrg(const _MySoapHeader: MySoapHeader; const userID: WideString_Optional; const typeIDs: WideString_Optional): WideString_Optional;
    function P_Sale_SalerByOrgID(const _MySoapHeader: MySoapHeader; const FOrganizationID: Integer): WideString_Optional;
    function P_Sale_GetCustomerBySaleManID(const _MySoapHeader: MySoapHeader; const saleManID: Integer): WideString_Optional;
    function GetBillNumber(const _MySoapHeader: MySoapHeader; const keyName: WideString_Optional): WideString_Optional;
    function GetCurrentDateTime(const _MySoapHeader: MySoapHeader): WideString_Optional;
    function GetCurrentDate(const _MySoapHeader: MySoapHeader): WideString_Optional;
    function ChangeUserPassword(const _MySoapHeader: MySoapHeader; const oldPassword: WideString_Optional; const newPassword: WideString_Optional; const loginName: WideString_Optional): WideString_Optional;
    function GetCurrentYearPeriodByDate(const _MySoapHeader: MySoapHeader; const currentDateTime: DateTime): WideString_Optional;
    function GetCurrentYearPeriod(const _MySoapHeader: MySoapHeader): WideString_Optional;
    function GetCurrentYear(const _MySoapHeader: MySoapHeader): WideString_Optional;
    function GetHistoryYearPeriod(const _MySoapHeader: MySoapHeader): WideString_Optional;
    function GetServerID(const _MySoapHeader: MySoapHeader): WideString_Optional;
    function Login(const _MySoapHeader: MySoapHeader; const loginName: WideString_Optional; const loginPassword: WideString_Optional): WideString_Optional;
    function GetUserInforMation(const _MySoapHeader: MySoapHeader; const loginName: WideString_Optional): WideString_Optional;
    function GetApplicationForUser(const _MySoapHeader: MySoapHeader; const userID: Int64; const appTypeID: Int64): WideString_Optional;
    function GetApplicationForAppByUser(const _MySoapHeader: MySoapHeader; const userID: Int64; const parentID: Int64; const appTypeID: Int64; const menuType: WideString_Optional): WideString_Optional;
    function GetModuleForUser(const _MySoapHeader: MySoapHeader; const userID: Int64; const applicationID: Int64; const appTypeID: Int64): WideString_Optional;
    function GetApplicationOperationForUser(const _MySoapHeader: MySoapHeader; const userID: Int64; const applicationID: Int64): WideString_Optional;
    function P_Sys_GetDepot(const _MySoapHeader: MySoapHeader; const companyIDs: UnicodeString; const companyID: UnicodeString; const depotTypeID: UnicodeString; const depotCategoryID: UnicodeString; const userID: UnicodeString): UnicodeString;
    function GetUserManageOrganization(const _MySoapHeader: MySoapHeader; const userID: Int64; const operationType: Integer; const organizationTypeID: Int64): WideString_Optional;
    function GetUserManageCompany(const _MySoapHeader: MySoapHeader; const userID: Int64; const operationType: Integer): WideString_Optional;
    function GetUserManageFactory(const _MySoapHeader: MySoapHeader; const userID: Int64; const operationType: Integer): WideString_Optional;
    function GetAndroidAppVersion(const _MySoapHeader: MySoapHeader): WideString_Optional;
  end;

  IFramework_Async = interface(IROAsyncInterface)
  ['{bd5b69f2-f1ac-4b1e-9d3d-19be38b4cd55}']
    procedure Invoke_GetBillID(const _MySoapHeader: MySoapHeader; const keyName: WideString_Optional);
    procedure Invoke_P_Sale_SaleDeptByOrgID(const _MySoapHeader: MySoapHeader; const FOrganizationID: WideString_Optional; const FTypeID: WideString_Optional);
    procedure Invoke_F_Sys_GetUserRetrieveOrg(const _MySoapHeader: MySoapHeader; const userID: WideString_Optional; const typeIDs: WideString_Optional);
    procedure Invoke_P_Sale_SalerByOrgID(const _MySoapHeader: MySoapHeader; const FOrganizationID: Integer);
    procedure Invoke_P_Sale_GetCustomerBySaleManID(const _MySoapHeader: MySoapHeader; const saleManID: Integer);
    procedure Invoke_GetBillNumber(const _MySoapHeader: MySoapHeader; const keyName: WideString_Optional);
    procedure Invoke_GetCurrentDateTime(const _MySoapHeader: MySoapHeader);
    procedure Invoke_GetCurrentDate(const _MySoapHeader: MySoapHeader);
    procedure Invoke_ChangeUserPassword(const _MySoapHeader: MySoapHeader; const oldPassword: WideString_Optional; const newPassword: WideString_Optional; const loginName: WideString_Optional);
    procedure Invoke_GetCurrentYearPeriodByDate(const _MySoapHeader: MySoapHeader; const currentDateTime: DateTime);
    procedure Invoke_GetCurrentYearPeriod(const _MySoapHeader: MySoapHeader);
    procedure Invoke_GetCurrentYear(const _MySoapHeader: MySoapHeader);
    procedure Invoke_GetHistoryYearPeriod(const _MySoapHeader: MySoapHeader);
    procedure Invoke_GetServerID(const _MySoapHeader: MySoapHeader);
    procedure Invoke_Login(const _MySoapHeader: MySoapHeader; const loginName: WideString_Optional; const loginPassword: WideString_Optional);
    procedure Invoke_GetUserInforMation(const _MySoapHeader: MySoapHeader; const loginName: WideString_Optional);
    procedure Invoke_GetApplicationForUser(const _MySoapHeader: MySoapHeader; const userID: Int64; const appTypeID: Int64);
    procedure Invoke_GetApplicationForAppByUser(const _MySoapHeader: MySoapHeader; const userID: Int64; const parentID: Int64; const appTypeID: Int64; const menuType: WideString_Optional);
    procedure Invoke_GetModuleForUser(const _MySoapHeader: MySoapHeader; const userID: Int64; const applicationID: Int64; const appTypeID: Int64);
    procedure Invoke_GetApplicationOperationForUser(const _MySoapHeader: MySoapHeader; const userID: Int64; const applicationID: Int64);
    procedure Invoke_P_Sys_GetDepot(const _MySoapHeader: MySoapHeader; const companyIDs: UnicodeString; const companyID: UnicodeString; const depotTypeID: UnicodeString; const depotCategoryID: UnicodeString; 
                                    const userID: UnicodeString);
    procedure Invoke_GetUserManageOrganization(const _MySoapHeader: MySoapHeader; const userID: Int64; const operationType: Integer; const organizationTypeID: Int64);
    procedure Invoke_GetUserManageCompany(const _MySoapHeader: MySoapHeader; const userID: Int64; const operationType: Integer);
    procedure Invoke_GetUserManageFactory(const _MySoapHeader: MySoapHeader; const userID: Int64; const operationType: Integer);
    procedure Invoke_GetAndroidAppVersion(const _MySoapHeader: MySoapHeader);
    function Retrieve_GetBillID: WideString_Optional;
    function Retrieve_P_Sale_SaleDeptByOrgID: WideString_Optional;
    function Retrieve_F_Sys_GetUserRetrieveOrg: WideString_Optional;
    function Retrieve_P_Sale_SalerByOrgID: WideString_Optional;
    function Retrieve_P_Sale_GetCustomerBySaleManID: WideString_Optional;
    function Retrieve_GetBillNumber: WideString_Optional;
    function Retrieve_GetCurrentDateTime: WideString_Optional;
    function Retrieve_GetCurrentDate: WideString_Optional;
    function Retrieve_ChangeUserPassword: WideString_Optional;
    function Retrieve_GetCurrentYearPeriodByDate: WideString_Optional;
    function Retrieve_GetCurrentYearPeriod: WideString_Optional;
    function Retrieve_GetCurrentYear: WideString_Optional;
    function Retrieve_GetHistoryYearPeriod: WideString_Optional;
    function Retrieve_GetServerID: WideString_Optional;
    function Retrieve_Login: WideString_Optional;
    function Retrieve_GetUserInforMation: WideString_Optional;
    function Retrieve_GetApplicationForUser: WideString_Optional;
    function Retrieve_GetApplicationForAppByUser: WideString_Optional;
    function Retrieve_GetModuleForUser: WideString_Optional;
    function Retrieve_GetApplicationOperationForUser: WideString_Optional;
    function Retrieve_P_Sys_GetDepot: UnicodeString;
    function Retrieve_GetUserManageOrganization: WideString_Optional;
    function Retrieve_GetUserManageCompany: WideString_Optional;
    function Retrieve_GetUserManageFactory: WideString_Optional;
    function Retrieve_GetAndroidAppVersion: WideString_Optional;
  end;

  IFramework_AsyncEx = interface(IROAsyncInterfaceEx)
  ['{ec1fb3e8-3d68-4691-896b-b7e20806b9e5}']
    function BeginGetBillID(const _MySoapHeader: MySoapHeader; const keyName: WideString_Optional; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginP_Sale_SaleDeptByOrgID(const _MySoapHeader: MySoapHeader; const FOrganizationID: WideString_Optional; const FTypeID: WideString_Optional; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginF_Sys_GetUserRetrieveOrg(const _MySoapHeader: MySoapHeader; const userID: WideString_Optional; const typeIDs: WideString_Optional; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginP_Sale_SalerByOrgID(const _MySoapHeader: MySoapHeader; const FOrganizationID: Integer; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginP_Sale_GetCustomerBySaleManID(const _MySoapHeader: MySoapHeader; const saleManID: Integer; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetBillNumber(const _MySoapHeader: MySoapHeader; const keyName: WideString_Optional; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetCurrentDateTime(const _MySoapHeader: MySoapHeader; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetCurrentDate(const _MySoapHeader: MySoapHeader; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginChangeUserPassword(const _MySoapHeader: MySoapHeader; const oldPassword: WideString_Optional; const newPassword: WideString_Optional; const loginName: WideString_Optional; const aCallback: TROAsyncCallback; 
                                     const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetCurrentYearPeriodByDate(const _MySoapHeader: MySoapHeader; const currentDateTime: DateTime; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetCurrentYearPeriod(const _MySoapHeader: MySoapHeader; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetCurrentYear(const _MySoapHeader: MySoapHeader; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetHistoryYearPeriod(const _MySoapHeader: MySoapHeader; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetServerID(const _MySoapHeader: MySoapHeader; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginLogin(const _MySoapHeader: MySoapHeader; const loginName: WideString_Optional; const loginPassword: WideString_Optional; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetUserInforMation(const _MySoapHeader: MySoapHeader; const loginName: WideString_Optional; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetApplicationForUser(const _MySoapHeader: MySoapHeader; const userID: Int64; const appTypeID: Int64; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetApplicationForAppByUser(const _MySoapHeader: MySoapHeader; const userID: Int64; const parentID: Int64; const appTypeID: Int64; const menuType: WideString_Optional; const aCallback: TROAsyncCallback; 
                                             const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetModuleForUser(const _MySoapHeader: MySoapHeader; const userID: Int64; const applicationID: Int64; const appTypeID: Int64; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetApplicationOperationForUser(const _MySoapHeader: MySoapHeader; const userID: Int64; const applicationID: Int64; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginP_Sys_GetDepot(const _MySoapHeader: MySoapHeader; const companyIDs: UnicodeString; const companyID: UnicodeString; const depotTypeID: UnicodeString; const depotCategoryID: UnicodeString; 
                                 const userID: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetUserManageOrganization(const _MySoapHeader: MySoapHeader; const userID: Int64; const operationType: Integer; const organizationTypeID: Int64; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetUserManageCompany(const _MySoapHeader: MySoapHeader; const userID: Int64; const operationType: Integer; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetUserManageFactory(const _MySoapHeader: MySoapHeader; const userID: Int64; const operationType: Integer; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetAndroidAppVersion(const _MySoapHeader: MySoapHeader; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function EndGetBillID(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndP_Sale_SaleDeptByOrgID(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndF_Sys_GetUserRetrieveOrg(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndP_Sale_SalerByOrgID(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndP_Sale_GetCustomerBySaleManID(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndGetBillNumber(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndGetCurrentDateTime(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndGetCurrentDate(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndChangeUserPassword(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndGetCurrentYearPeriodByDate(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndGetCurrentYearPeriod(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndGetCurrentYear(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndGetHistoryYearPeriod(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndGetServerID(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndLogin(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndGetUserInforMation(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndGetApplicationForUser(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndGetApplicationForAppByUser(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndGetModuleForUser(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndGetApplicationOperationForUser(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndP_Sys_GetDepot(const aRequest: IROAsyncRequest): UnicodeString;
    function EndGetUserManageOrganization(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndGetUserManageCompany(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndGetUserManageFactory(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndGetAndroidAppVersion(const aRequest: IROAsyncRequest): WideString_Optional;
  end;

  CoFramework = class(System.TObject)
  public
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IFramework; overload;
    class function Create(const aUri: TROUri): IFramework; overload;
    class function Create(const aUrl: String): IFramework; overload;
  end;

  CoFramework_Async = class(System.TObject)
  public
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IFramework_Async; overload;
    class function Create(const aUri: TROUri): IFramework_Async; overload;
    class function Create(const aUrl: String): IFramework_Async; overload;
  end;

  CoFramework_AsyncEx = class(System.TObject)
  public
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IFramework_AsyncEx; overload;
    class function Create(const aUri: TROUri): IFramework_AsyncEx; overload;
    class function Create(const aUrl: String): IFramework_AsyncEx; overload;
  end;

  TFramework_Proxy = class(TROProxy, IFramework)
  protected
    function __GetInterfaceName: String; override; 
    function GetBillID(const _MySoapHeader: MySoapHeader; const keyName: WideString_Optional): WideString_Optional;
    function P_Sale_SaleDeptByOrgID(const _MySoapHeader: MySoapHeader; const FOrganizationID: WideString_Optional; const FTypeID: WideString_Optional): WideString_Optional;
    function F_Sys_GetUserRetrieveOrg(const _MySoapHeader: MySoapHeader; const userID: WideString_Optional; const typeIDs: WideString_Optional): WideString_Optional;
    function P_Sale_SalerByOrgID(const _MySoapHeader: MySoapHeader; const FOrganizationID: Integer): WideString_Optional;
    function P_Sale_GetCustomerBySaleManID(const _MySoapHeader: MySoapHeader; const saleManID: Integer): WideString_Optional;
    function GetBillNumber(const _MySoapHeader: MySoapHeader; const keyName: WideString_Optional): WideString_Optional;
    function GetCurrentDateTime(const _MySoapHeader: MySoapHeader): WideString_Optional;
    function GetCurrentDate(const _MySoapHeader: MySoapHeader): WideString_Optional;
    function ChangeUserPassword(const _MySoapHeader: MySoapHeader; const oldPassword: WideString_Optional; const newPassword: WideString_Optional; const loginName: WideString_Optional): WideString_Optional;
    function GetCurrentYearPeriodByDate(const _MySoapHeader: MySoapHeader; const currentDateTime: DateTime): WideString_Optional;
    function GetCurrentYearPeriod(const _MySoapHeader: MySoapHeader): WideString_Optional;
    function GetCurrentYear(const _MySoapHeader: MySoapHeader): WideString_Optional;
    function GetHistoryYearPeriod(const _MySoapHeader: MySoapHeader): WideString_Optional;
    function GetServerID(const _MySoapHeader: MySoapHeader): WideString_Optional;
    function Login(const _MySoapHeader: MySoapHeader; const loginName: WideString_Optional; const loginPassword: WideString_Optional): WideString_Optional;
    function GetUserInforMation(const _MySoapHeader: MySoapHeader; const loginName: WideString_Optional): WideString_Optional;
    function GetApplicationForUser(const _MySoapHeader: MySoapHeader; const userID: Int64; const appTypeID: Int64): WideString_Optional;
    function GetApplicationForAppByUser(const _MySoapHeader: MySoapHeader; const userID: Int64; const parentID: Int64; const appTypeID: Int64; const menuType: WideString_Optional): WideString_Optional;
    function GetModuleForUser(const _MySoapHeader: MySoapHeader; const userID: Int64; const applicationID: Int64; const appTypeID: Int64): WideString_Optional;
    function GetApplicationOperationForUser(const _MySoapHeader: MySoapHeader; const userID: Int64; const applicationID: Int64): WideString_Optional;
    function P_Sys_GetDepot(const _MySoapHeader: MySoapHeader; const companyIDs: UnicodeString; const companyID: UnicodeString; const depotTypeID: UnicodeString; const depotCategoryID: UnicodeString; const userID: UnicodeString): UnicodeString;
    function GetUserManageOrganization(const _MySoapHeader: MySoapHeader; const userID: Int64; const operationType: Integer; const organizationTypeID: Int64): WideString_Optional;
    function GetUserManageCompany(const _MySoapHeader: MySoapHeader; const userID: Int64; const operationType: Integer): WideString_Optional;
    function GetUserManageFactory(const _MySoapHeader: MySoapHeader; const userID: Int64; const operationType: Integer): WideString_Optional;
    function GetAndroidAppVersion(const _MySoapHeader: MySoapHeader): WideString_Optional;
  end;

  TFramework_AsyncProxy = class(TROAsyncProxy, IFramework_Async)
  protected
    function __GetInterfaceName: String; override; 
    procedure Invoke_GetBillID(const _MySoapHeader: MySoapHeader; const keyName: WideString_Optional);
    procedure Invoke_P_Sale_SaleDeptByOrgID(const _MySoapHeader: MySoapHeader; const FOrganizationID: WideString_Optional; const FTypeID: WideString_Optional);
    procedure Invoke_F_Sys_GetUserRetrieveOrg(const _MySoapHeader: MySoapHeader; const userID: WideString_Optional; const typeIDs: WideString_Optional);
    procedure Invoke_P_Sale_SalerByOrgID(const _MySoapHeader: MySoapHeader; const FOrganizationID: Integer);
    procedure Invoke_P_Sale_GetCustomerBySaleManID(const _MySoapHeader: MySoapHeader; const saleManID: Integer);
    procedure Invoke_GetBillNumber(const _MySoapHeader: MySoapHeader; const keyName: WideString_Optional);
    procedure Invoke_GetCurrentDateTime(const _MySoapHeader: MySoapHeader);
    procedure Invoke_GetCurrentDate(const _MySoapHeader: MySoapHeader);
    procedure Invoke_ChangeUserPassword(const _MySoapHeader: MySoapHeader; const oldPassword: WideString_Optional; const newPassword: WideString_Optional; const loginName: WideString_Optional);
    procedure Invoke_GetCurrentYearPeriodByDate(const _MySoapHeader: MySoapHeader; const currentDateTime: DateTime);
    procedure Invoke_GetCurrentYearPeriod(const _MySoapHeader: MySoapHeader);
    procedure Invoke_GetCurrentYear(const _MySoapHeader: MySoapHeader);
    procedure Invoke_GetHistoryYearPeriod(const _MySoapHeader: MySoapHeader);
    procedure Invoke_GetServerID(const _MySoapHeader: MySoapHeader);
    procedure Invoke_Login(const _MySoapHeader: MySoapHeader; const loginName: WideString_Optional; const loginPassword: WideString_Optional);
    procedure Invoke_GetUserInforMation(const _MySoapHeader: MySoapHeader; const loginName: WideString_Optional);
    procedure Invoke_GetApplicationForUser(const _MySoapHeader: MySoapHeader; const userID: Int64; const appTypeID: Int64);
    procedure Invoke_GetApplicationForAppByUser(const _MySoapHeader: MySoapHeader; const userID: Int64; const parentID: Int64; const appTypeID: Int64; const menuType: WideString_Optional);
    procedure Invoke_GetModuleForUser(const _MySoapHeader: MySoapHeader; const userID: Int64; const applicationID: Int64; const appTypeID: Int64);
    procedure Invoke_GetApplicationOperationForUser(const _MySoapHeader: MySoapHeader; const userID: Int64; const applicationID: Int64);
    procedure Invoke_P_Sys_GetDepot(const _MySoapHeader: MySoapHeader; const companyIDs: UnicodeString; const companyID: UnicodeString; const depotTypeID: UnicodeString; const depotCategoryID: UnicodeString; 
                                    const userID: UnicodeString);
    procedure Invoke_GetUserManageOrganization(const _MySoapHeader: MySoapHeader; const userID: Int64; const operationType: Integer; const organizationTypeID: Int64);
    procedure Invoke_GetUserManageCompany(const _MySoapHeader: MySoapHeader; const userID: Int64; const operationType: Integer);
    procedure Invoke_GetUserManageFactory(const _MySoapHeader: MySoapHeader; const userID: Int64; const operationType: Integer);
    procedure Invoke_GetAndroidAppVersion(const _MySoapHeader: MySoapHeader);
    function Retrieve_GetBillID: WideString_Optional;
    function Retrieve_P_Sale_SaleDeptByOrgID: WideString_Optional;
    function Retrieve_F_Sys_GetUserRetrieveOrg: WideString_Optional;
    function Retrieve_P_Sale_SalerByOrgID: WideString_Optional;
    function Retrieve_P_Sale_GetCustomerBySaleManID: WideString_Optional;
    function Retrieve_GetBillNumber: WideString_Optional;
    function Retrieve_GetCurrentDateTime: WideString_Optional;
    function Retrieve_GetCurrentDate: WideString_Optional;
    function Retrieve_ChangeUserPassword: WideString_Optional;
    function Retrieve_GetCurrentYearPeriodByDate: WideString_Optional;
    function Retrieve_GetCurrentYearPeriod: WideString_Optional;
    function Retrieve_GetCurrentYear: WideString_Optional;
    function Retrieve_GetHistoryYearPeriod: WideString_Optional;
    function Retrieve_GetServerID: WideString_Optional;
    function Retrieve_Login: WideString_Optional;
    function Retrieve_GetUserInforMation: WideString_Optional;
    function Retrieve_GetApplicationForUser: WideString_Optional;
    function Retrieve_GetApplicationForAppByUser: WideString_Optional;
    function Retrieve_GetModuleForUser: WideString_Optional;
    function Retrieve_GetApplicationOperationForUser: WideString_Optional;
    function Retrieve_P_Sys_GetDepot: UnicodeString;
    function Retrieve_GetUserManageOrganization: WideString_Optional;
    function Retrieve_GetUserManageCompany: WideString_Optional;
    function Retrieve_GetUserManageFactory: WideString_Optional;
    function Retrieve_GetAndroidAppVersion: WideString_Optional;
  end;

  TFramework_AsyncProxyEx = class(TROAsyncProxyEx, IFramework_AsyncEx)
  protected
    function __GetInterfaceName: String; override; 
    function BeginGetBillID(const _MySoapHeader: MySoapHeader; const keyName: WideString_Optional; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginP_Sale_SaleDeptByOrgID(const _MySoapHeader: MySoapHeader; const FOrganizationID: WideString_Optional; const FTypeID: WideString_Optional; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginF_Sys_GetUserRetrieveOrg(const _MySoapHeader: MySoapHeader; const userID: WideString_Optional; const typeIDs: WideString_Optional; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginP_Sale_SalerByOrgID(const _MySoapHeader: MySoapHeader; const FOrganizationID: Integer; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginP_Sale_GetCustomerBySaleManID(const _MySoapHeader: MySoapHeader; const saleManID: Integer; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetBillNumber(const _MySoapHeader: MySoapHeader; const keyName: WideString_Optional; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetCurrentDateTime(const _MySoapHeader: MySoapHeader; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetCurrentDate(const _MySoapHeader: MySoapHeader; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginChangeUserPassword(const _MySoapHeader: MySoapHeader; const oldPassword: WideString_Optional; const newPassword: WideString_Optional; const loginName: WideString_Optional; const aCallback: TROAsyncCallback; 
                                     const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetCurrentYearPeriodByDate(const _MySoapHeader: MySoapHeader; const currentDateTime: DateTime; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetCurrentYearPeriod(const _MySoapHeader: MySoapHeader; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetCurrentYear(const _MySoapHeader: MySoapHeader; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetHistoryYearPeriod(const _MySoapHeader: MySoapHeader; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetServerID(const _MySoapHeader: MySoapHeader; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginLogin(const _MySoapHeader: MySoapHeader; const loginName: WideString_Optional; const loginPassword: WideString_Optional; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetUserInforMation(const _MySoapHeader: MySoapHeader; const loginName: WideString_Optional; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetApplicationForUser(const _MySoapHeader: MySoapHeader; const userID: Int64; const appTypeID: Int64; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetApplicationForAppByUser(const _MySoapHeader: MySoapHeader; const userID: Int64; const parentID: Int64; const appTypeID: Int64; const menuType: WideString_Optional; const aCallback: TROAsyncCallback; 
                                             const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetModuleForUser(const _MySoapHeader: MySoapHeader; const userID: Int64; const applicationID: Int64; const appTypeID: Int64; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetApplicationOperationForUser(const _MySoapHeader: MySoapHeader; const userID: Int64; const applicationID: Int64; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginP_Sys_GetDepot(const _MySoapHeader: MySoapHeader; const companyIDs: UnicodeString; const companyID: UnicodeString; const depotTypeID: UnicodeString; const depotCategoryID: UnicodeString; 
                                 const userID: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetUserManageOrganization(const _MySoapHeader: MySoapHeader; const userID: Int64; const operationType: Integer; const organizationTypeID: Int64; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetUserManageCompany(const _MySoapHeader: MySoapHeader; const userID: Int64; const operationType: Integer; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetUserManageFactory(const _MySoapHeader: MySoapHeader; const userID: Int64; const operationType: Integer; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetAndroidAppVersion(const _MySoapHeader: MySoapHeader; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function EndGetBillID(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndP_Sale_SaleDeptByOrgID(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndF_Sys_GetUserRetrieveOrg(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndP_Sale_SalerByOrgID(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndP_Sale_GetCustomerBySaleManID(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndGetBillNumber(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndGetCurrentDateTime(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndGetCurrentDate(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndChangeUserPassword(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndGetCurrentYearPeriodByDate(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndGetCurrentYearPeriod(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndGetCurrentYear(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndGetHistoryYearPeriod(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndGetServerID(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndLogin(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndGetUserInforMation(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndGetApplicationForUser(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndGetApplicationForAppByUser(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndGetModuleForUser(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndGetApplicationOperationForUser(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndP_Sys_GetDepot(const aRequest: IROAsyncRequest): UnicodeString;
    function EndGetUserManageOrganization(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndGetUserManageCompany(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndGetUserManageFactory(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndGetAndroidAppVersion(const aRequest: IROAsyncRequest): WideString_Optional;
  end;

implementation

uses
  uROSerializer,
  uROClient,
  uROTransportChannel,
  uRORes;

type
  { Forward declarations }
  TMyTransportChannel = class;

  TMyTransportChannel = class(TROTransportChannel)
  end;

class function CoFramework.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IFramework;
begin
  result := TFramework_Proxy.Create(aMessage, aTransportChannel);
  exit;
end;

class function CoFramework.Create(const aUri: TROUri): IFramework;
begin
  result := TFramework_Proxy.Create(aUri);
  exit;
end;

class function CoFramework.Create(const aUrl: String): IFramework;
begin
  result := TFramework_Proxy.Create(aUrl);
  exit;
end;

class function CoFramework_Async.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IFramework_Async;
begin
  result := TFramework_AsyncProxy.Create(aMessage, aTransportChannel);
  exit;
end;

class function CoFramework_Async.Create(const aUri: TROUri): IFramework_Async;
begin
  result := TFramework_AsyncProxy.Create(aUri);
  exit;
end;

class function CoFramework_Async.Create(const aUrl: String): IFramework_Async;
begin
  result := TFramework_AsyncProxy.Create(aUrl);
  exit;
end;

class function CoFramework_AsyncEx.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IFramework_AsyncEx;
begin
  result := TFramework_AsyncProxyEx.Create(aMessage, aTransportChannel);
  exit;
end;

class function CoFramework_AsyncEx.Create(const aUri: TROUri): IFramework_AsyncEx;
begin
  result := TFramework_AsyncProxyEx.Create(aUri);
  exit;
end;

class function CoFramework_AsyncEx.Create(const aUrl: String): IFramework_AsyncEx;
begin
  result := TFramework_AsyncProxyEx.Create(aUrl);
  exit;
end;

function TFramework_Proxy.__GetInterfaceName: String;
begin
  result := 'Framework';
  exit;
end;

function TFramework_Proxy.GetBillID(const _MySoapHeader: MySoapHeader; const keyName: WideString_Optional): WideString_Optional;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                             'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                             'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                             'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                             'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                             'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetBillID', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', '*', 
                                             'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                             'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                             'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                             'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                             'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                             'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                             'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetBillID', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetBillID');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('keyName', System.TypeInfo(WideString_Optional), keyName, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('GetBillIDResult', System.TypeInfo(WideString_Optional), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_Proxy.P_Sale_SaleDeptByOrgID(const _MySoapHeader: MySoapHeader; const FOrganizationID: WideString_Optional; const FTypeID: WideString_Optional): WideString_Optional;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                             'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                             'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                             'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                             'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                             'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/P_Sale_SaleDeptByOrgID', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                             '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                             'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                             'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                             'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                             'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                             'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                             'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'P_Sale_SaleDeptByOrgID', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'P_Sale_SaleDeptByOrgID');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('FOrganizationID', System.TypeInfo(WideString_Optional), FOrganizationID, []);
    lMessage.Write('FTypeID', System.TypeInfo(WideString_Optional), FTypeID, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('P_Sale_SaleDeptByOrgIDResult', System.TypeInfo(WideString_Optional), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_Proxy.F_Sys_GetUserRetrieveOrg(const _MySoapHeader: MySoapHeader; const userID: WideString_Optional; const typeIDs: WideString_Optional): WideString_Optional;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                             'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                             'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                             'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                             'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                             'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                             '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                             'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                             'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                             'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                             'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                             'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                             'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'F_Sys_GetUserRetrieveOrg');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('userID', System.TypeInfo(WideString_Optional), userID, []);
    lMessage.Write('typeIDs', System.TypeInfo(WideString_Optional), typeIDs, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('F_Sys_GetUserRetrieveOrgResult', System.TypeInfo(WideString_Optional), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_Proxy.P_Sale_SalerByOrgID(const _MySoapHeader: MySoapHeader; const FOrganizationID: Integer): WideString_Optional;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                             'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                             'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                             'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                             'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                             'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/P_Sale_SalerByOrgID', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                             '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                             'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                             'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                             'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                             'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                             'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                             'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'P_Sale_SalerByOrgID', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'P_Sale_SalerByOrgID');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('FOrganizationID', System.TypeInfo(Integer), FOrganizationID, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('P_Sale_SalerByOrgIDResult', System.TypeInfo(WideString_Optional), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_Proxy.P_Sale_GetCustomerBySaleManID(const _MySoapHeader: MySoapHeader; const saleManID: Integer): WideString_Optional;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                             'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                             'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                             'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                             'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                             'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                             '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                             'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                             'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                             'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                             'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                             'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                             'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'P_Sale_GetCustomerBySaleManID');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('saleManID', System.TypeInfo(Integer), saleManID, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('P_Sale_GetCustomerBySaleManIDResult', System.TypeInfo(WideString_Optional), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_Proxy.GetBillNumber(const _MySoapHeader: MySoapHeader; const keyName: WideString_Optional): WideString_Optional;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                             'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                             'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                             'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                             'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                             'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetBillNumber', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                             '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                             'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                             'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                             'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                             'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                             'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                             'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetBillNumber', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetBillNumber');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('keyName', System.TypeInfo(WideString_Optional), keyName, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('GetBillNumberResult', System.TypeInfo(WideString_Optional), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_Proxy.GetCurrentDateTime(const _MySoapHeader: MySoapHeader): WideString_Optional;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                             'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                             'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                             'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                             'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                             'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetCurrentDateTime', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                             '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                             'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                             'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                             'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                             'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                             'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                             'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetCurrentDateTime', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetCurrentDateTime');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('GetCurrentDateTimeResult', System.TypeInfo(WideString_Optional), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_Proxy.GetCurrentDate(const _MySoapHeader: MySoapHeader): WideString_Optional;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                             'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                             'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                             'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                             'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                             'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetCurrentDate', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                             '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                             'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                             'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                             'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                             'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                             'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                             'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetCurrentDate', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetCurrentDate');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('GetCurrentDateResult', System.TypeInfo(WideString_Optional), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_Proxy.ChangeUserPassword(const _MySoapHeader: MySoapHeader; const oldPassword: WideString_Optional; const newPassword: WideString_Optional; const loginName: WideString_Optional): WideString_Optional;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                             'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                             'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                             'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                             'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                             'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/ChangeUserPassword', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                             '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                             'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                             'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                             'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                             'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                             'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                             'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'ChangeUserPassword', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'ChangeUserPassword');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('oldPassword', System.TypeInfo(WideString_Optional), oldPassword, []);
    lMessage.Write('newPassword', System.TypeInfo(WideString_Optional), newPassword, []);
    lMessage.Write('loginName', System.TypeInfo(WideString_Optional), loginName, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('ChangeUserPasswordResult', System.TypeInfo(WideString_Optional), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_Proxy.GetCurrentYearPeriodByDate(const _MySoapHeader: MySoapHeader; const currentDateTime: DateTime): WideString_Optional;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                             'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                             'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                             'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                             'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                             'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetCurrentYearPeriodByDate', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                             '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                             'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                             'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                             'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                             'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                             'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                             'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetCurrentYearPeriodByDate', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetCurrentYearPeriodByDate');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('currentDateTime', System.TypeInfo(DateTime), currentDateTime, [paIsDateTime]);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('GetCurrentYearPeriodByDateResult', System.TypeInfo(WideString_Optional), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_Proxy.GetCurrentYearPeriod(const _MySoapHeader: MySoapHeader): WideString_Optional;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                             'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                             'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                             'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                             'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                             'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetCurrentYearPeriod', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                             '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                             'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                             'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                             'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                             'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                             'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                             'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetCurrentYearPeriod', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetCurrentYearPeriod');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('GetCurrentYearPeriodResult', System.TypeInfo(WideString_Optional), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_Proxy.GetCurrentYear(const _MySoapHeader: MySoapHeader): WideString_Optional;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                             'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                             'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                             'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                             'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                             'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetCurrentYear', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                             '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                             'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                             'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                             'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                             'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                             'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                             'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetCurrentYear', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetCurrentYear');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('GetCurrentYearResult', System.TypeInfo(WideString_Optional), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_Proxy.GetHistoryYearPeriod(const _MySoapHeader: MySoapHeader): WideString_Optional;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                             'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                             'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                             'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                             'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                             'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetHistoryYearPeriod', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                             '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                             'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                             'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                             'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                             'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                             'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                             'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetHistoryYearPeriod', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetHistoryYearPeriod');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('GetHistoryYearPeriodResult', System.TypeInfo(WideString_Optional), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_Proxy.GetServerID(const _MySoapHeader: MySoapHeader): WideString_Optional;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                             'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                             'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                             'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                             'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                             'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetServerID', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                             '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                             'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                             'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                             'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                             'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                             'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                             'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetServerID', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetServerID');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('GetServerIDResult', System.TypeInfo(WideString_Optional), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_Proxy.Login(const _MySoapHeader: MySoapHeader; const loginName: WideString_Optional; const loginPassword: WideString_Optional): WideString_Optional;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                             'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                             'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                             'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                             'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                             'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/Login', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', '*', 'http://tempuri.org/ChangeUserPassword', 
                                             'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 'http://tempuri.org/GetApplicationForUser', 
                                             'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 'http://tempuri.org/GetCurrentDate', 
                                             'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 'http://tempuri.org/GetCurrentYearPeriodByDate', 
                                             'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 'http://tempuri.org/GetUserInforMation', 
                                             'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 'http://tempuri.org/Login', 
                                             'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 'http://tempuri.org/P_Sys_GetDepot', 
                                             'http://tempuri.org/', 'Login', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'Login');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('loginName', System.TypeInfo(WideString_Optional), loginName, []);
    lMessage.Write('loginPassword', System.TypeInfo(WideString_Optional), loginPassword, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('LoginResult', System.TypeInfo(WideString_Optional), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_Proxy.GetUserInforMation(const _MySoapHeader: MySoapHeader; const loginName: WideString_Optional): WideString_Optional;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                             'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                             'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                             'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                             'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                             'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetUserInforMation', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                             '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                             'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                             'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                             'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                             'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                             'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                             'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetUserInforMation', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetUserInforMation');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('loginName', System.TypeInfo(WideString_Optional), loginName, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('GetUserInforMationResult', System.TypeInfo(WideString_Optional), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_Proxy.GetApplicationForUser(const _MySoapHeader: MySoapHeader; const userID: Int64; const appTypeID: Int64): WideString_Optional;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                             'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                             'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                             'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                             'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                             'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetApplicationForUser', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                             '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                             'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                             'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                             'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                             'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                             'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                             'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetApplicationForUser', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetApplicationForUser');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('userID', System.TypeInfo(Int64), userID, []);
    lMessage.Write('appTypeID', System.TypeInfo(Int64), appTypeID, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('GetApplicationForUserResult', System.TypeInfo(WideString_Optional), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_Proxy.GetApplicationForAppByUser(const _MySoapHeader: MySoapHeader; const userID: Int64; const parentID: Int64; const appTypeID: Int64; const menuType: WideString_Optional): WideString_Optional;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                             'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                             'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                             'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                             'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                             'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetApplicationForAppByUser', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                             '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                             'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                             'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                             'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                             'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                             'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                             'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetApplicationForAppByUser', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetApplicationForAppByUser');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('userID', System.TypeInfo(Int64), userID, []);
    lMessage.Write('parentID', System.TypeInfo(Int64), parentID, []);
    lMessage.Write('appTypeID', System.TypeInfo(Int64), appTypeID, []);
    lMessage.Write('menuType', System.TypeInfo(WideString_Optional), menuType, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('GetApplicationForAppByUserResult', System.TypeInfo(WideString_Optional), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_Proxy.GetModuleForUser(const _MySoapHeader: MySoapHeader; const userID: Int64; const applicationID: Int64; const appTypeID: Int64): WideString_Optional;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                             'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                             'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                             'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                             'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                             'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetModuleForUser', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                             '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                             'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                             'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                             'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                             'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                             'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                             'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetModuleForUser', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetModuleForUser');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('userID', System.TypeInfo(Int64), userID, []);
    lMessage.Write('applicationID', System.TypeInfo(Int64), applicationID, []);
    lMessage.Write('appTypeID', System.TypeInfo(Int64), appTypeID, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('GetModuleForUserResult', System.TypeInfo(WideString_Optional), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_Proxy.GetApplicationOperationForUser(const _MySoapHeader: MySoapHeader; const userID: Int64; const applicationID: Int64): WideString_Optional;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                             'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                             'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                             'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                             'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                             'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetApplicationOperationForUser', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                             '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                             'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                             'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                             'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                             'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                             'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                             'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetApplicationOperationForUser', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetApplicationOperationForUser');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('userID', System.TypeInfo(Int64), userID, []);
    lMessage.Write('applicationID', System.TypeInfo(Int64), applicationID, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('GetApplicationOperationForUserResult', System.TypeInfo(WideString_Optional), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_Proxy.P_Sys_GetDepot(const _MySoapHeader: MySoapHeader; const companyIDs: UnicodeString; const companyID: UnicodeString; const depotTypeID: UnicodeString; const depotCategoryID: UnicodeString; 
                                         const userID: UnicodeString): UnicodeString;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: UnicodeString;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                             'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                             'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                             'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                             'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                             'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/P_Sys_GetDepot', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                             '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                             'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                             'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                             'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                             'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                             'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                             'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'P_Sys_GetDepot', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'P_Sys_GetDepot');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('companyIDs', System.TypeInfo(UnicodeString), companyIDs, []);
    lMessage.Write('companyID', System.TypeInfo(UnicodeString), companyID, []);
    lMessage.Write('depotTypeID', System.TypeInfo(UnicodeString), depotTypeID, []);
    lMessage.Write('depotCategoryID', System.TypeInfo(UnicodeString), depotCategoryID, []);
    lMessage.Write('userID', System.TypeInfo(UnicodeString), userID, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('P_Sys_GetDepotResult', System.TypeInfo(UnicodeString), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_Proxy.GetUserManageOrganization(const _MySoapHeader: MySoapHeader; const userID: Int64; const operationType: Integer; const organizationTypeID: Int64): WideString_Optional;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                             'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                             'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                             'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                             'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                             'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetUserManageOrganization', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                             '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                             'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                             'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                             'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                             'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                             'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                             'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetUserManageOrganization', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetUserManageOrganization');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('userID', System.TypeInfo(Int64), userID, []);
    lMessage.Write('operationType', System.TypeInfo(Integer), operationType, []);
    lMessage.Write('organizationTypeID', System.TypeInfo(Int64), organizationTypeID, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('GetUserManageOrganizationResult', System.TypeInfo(WideString_Optional), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_Proxy.GetUserManageCompany(const _MySoapHeader: MySoapHeader; const userID: Int64; const operationType: Integer): WideString_Optional;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                             'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                             'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                             'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                             'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                             'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetUserManageCompany', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                             '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                             'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                             'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                             'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                             'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                             'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                             'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetUserManageCompany', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetUserManageCompany');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('userID', System.TypeInfo(Int64), userID, []);
    lMessage.Write('operationType', System.TypeInfo(Integer), operationType, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('GetUserManageCompanyResult', System.TypeInfo(WideString_Optional), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_Proxy.GetUserManageFactory(const _MySoapHeader: MySoapHeader; const userID: Int64; const operationType: Integer): WideString_Optional;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                             'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                             'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                             'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                             'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                             'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetUserManageFactory', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                             '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                             'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                             'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                             'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                             'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                             'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                             'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetUserManageFactory', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetUserManageFactory');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('userID', System.TypeInfo(Int64), userID, []);
    lMessage.Write('operationType', System.TypeInfo(Integer), operationType, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('GetUserManageFactoryResult', System.TypeInfo(WideString_Optional), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_Proxy.GetAndroidAppVersion(const _MySoapHeader: MySoapHeader): WideString_Optional;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                             'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                             'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                             'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                             'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                             'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetAndroidAppVersion', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                             '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                             'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                             'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                             'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                             'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                             'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                             'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetAndroidAppVersion', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetAndroidAppVersion');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('GetAndroidAppVersionResult', System.TypeInfo(WideString_Optional), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxy.__GetInterfaceName: String;
begin
  result := 'Framework';
  exit;
end;

procedure TFramework_AsyncProxy.Invoke_GetBillID(const _MySoapHeader: MySoapHeader; const keyName: WideString_Optional);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('GetBillID');

    lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                               'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                               'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                               'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                               'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                               'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetBillID', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                               '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                               'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                               'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                               'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                               'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                               'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetBillID', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetBillID');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('keyName', System.TypeInfo(WideString_Optional), keyName, []);
    __DispatchAsyncRequest('GetBillID', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TFramework_AsyncProxy.Invoke_P_Sale_SaleDeptByOrgID(const _MySoapHeader: MySoapHeader; const FOrganizationID: WideString_Optional; const FTypeID: WideString_Optional);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('P_Sale_SaleDeptByOrgID');

    lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                               'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                               'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                               'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                               'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                               'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/P_Sale_SaleDeptByOrgID', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                               '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                               'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                               'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                               'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                               'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                               'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'P_Sale_SaleDeptByOrgID', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'P_Sale_SaleDeptByOrgID');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('FOrganizationID', System.TypeInfo(WideString_Optional), FOrganizationID, []);
    lMessage.Write('FTypeID', System.TypeInfo(WideString_Optional), FTypeID, []);
    __DispatchAsyncRequest('P_Sale_SaleDeptByOrgID', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TFramework_AsyncProxy.Invoke_F_Sys_GetUserRetrieveOrg(const _MySoapHeader: MySoapHeader; const userID: WideString_Optional; const typeIDs: WideString_Optional);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('F_Sys_GetUserRetrieveOrg');

    lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                               'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                               'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                               'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                               'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                               'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                               '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                               'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                               'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                               'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                               'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                               'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'F_Sys_GetUserRetrieveOrg');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('userID', System.TypeInfo(WideString_Optional), userID, []);
    lMessage.Write('typeIDs', System.TypeInfo(WideString_Optional), typeIDs, []);
    __DispatchAsyncRequest('F_Sys_GetUserRetrieveOrg', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TFramework_AsyncProxy.Invoke_P_Sale_SalerByOrgID(const _MySoapHeader: MySoapHeader; const FOrganizationID: Integer);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('P_Sale_SalerByOrgID');

    lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                               'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                               'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                               'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                               'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                               'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/P_Sale_SalerByOrgID', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                               '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                               'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                               'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                               'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                               'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                               'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'P_Sale_SalerByOrgID', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'P_Sale_SalerByOrgID');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('FOrganizationID', System.TypeInfo(Integer), FOrganizationID, []);
    __DispatchAsyncRequest('P_Sale_SalerByOrgID', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TFramework_AsyncProxy.Invoke_P_Sale_GetCustomerBySaleManID(const _MySoapHeader: MySoapHeader; const saleManID: Integer);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('P_Sale_GetCustomerBySaleManID');

    lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                               'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                               'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                               'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                               'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                               'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                               '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                               'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                               'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                               'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                               'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                               'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'P_Sale_GetCustomerBySaleManID');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('saleManID', System.TypeInfo(Integer), saleManID, []);
    __DispatchAsyncRequest('P_Sale_GetCustomerBySaleManID', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TFramework_AsyncProxy.Invoke_GetBillNumber(const _MySoapHeader: MySoapHeader; const keyName: WideString_Optional);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('GetBillNumber');

    lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                               'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                               'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                               'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                               'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                               'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetBillNumber', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                               '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                               'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                               'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                               'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                               'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                               'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetBillNumber', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetBillNumber');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('keyName', System.TypeInfo(WideString_Optional), keyName, []);
    __DispatchAsyncRequest('GetBillNumber', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TFramework_AsyncProxy.Invoke_GetCurrentDateTime(const _MySoapHeader: MySoapHeader);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('GetCurrentDateTime');

    lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                               'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                               'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                               'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                               'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                               'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetCurrentDateTime', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                               '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                               'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                               'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                               'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                               'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                               'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetCurrentDateTime', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetCurrentDateTime');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    __DispatchAsyncRequest('GetCurrentDateTime', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TFramework_AsyncProxy.Invoke_GetCurrentDate(const _MySoapHeader: MySoapHeader);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('GetCurrentDate');

    lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                               'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                               'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                               'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                               'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                               'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetCurrentDate', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                               '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                               'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                               'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                               'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                               'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                               'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetCurrentDate', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetCurrentDate');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    __DispatchAsyncRequest('GetCurrentDate', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TFramework_AsyncProxy.Invoke_ChangeUserPassword(const _MySoapHeader: MySoapHeader; const oldPassword: WideString_Optional; const newPassword: WideString_Optional; const loginName: WideString_Optional);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('ChangeUserPassword');

    lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                               'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                               'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                               'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                               'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                               'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/ChangeUserPassword', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                               '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                               'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                               'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                               'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                               'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                               'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'ChangeUserPassword', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'ChangeUserPassword');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('oldPassword', System.TypeInfo(WideString_Optional), oldPassword, []);
    lMessage.Write('newPassword', System.TypeInfo(WideString_Optional), newPassword, []);
    lMessage.Write('loginName', System.TypeInfo(WideString_Optional), loginName, []);
    __DispatchAsyncRequest('ChangeUserPassword', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TFramework_AsyncProxy.Invoke_GetCurrentYearPeriodByDate(const _MySoapHeader: MySoapHeader; const currentDateTime: DateTime);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('GetCurrentYearPeriodByDate');

    lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                               'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                               'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                               'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                               'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                               'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetCurrentYearPeriodByDate', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                               '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                               'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                               'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                               'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                               'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                               'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetCurrentYearPeriodByDate', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetCurrentYearPeriodByDate');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('currentDateTime', System.TypeInfo(DateTime), currentDateTime, [paIsDateTime]);
    __DispatchAsyncRequest('GetCurrentYearPeriodByDate', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TFramework_AsyncProxy.Invoke_GetCurrentYearPeriod(const _MySoapHeader: MySoapHeader);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('GetCurrentYearPeriod');

    lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                               'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                               'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                               'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                               'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                               'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetCurrentYearPeriod', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                               '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                               'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                               'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                               'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                               'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                               'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetCurrentYearPeriod', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetCurrentYearPeriod');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    __DispatchAsyncRequest('GetCurrentYearPeriod', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TFramework_AsyncProxy.Invoke_GetCurrentYear(const _MySoapHeader: MySoapHeader);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('GetCurrentYear');

    lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                               'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                               'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                               'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                               'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                               'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetCurrentYear', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                               '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                               'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                               'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                               'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                               'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                               'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetCurrentYear', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetCurrentYear');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    __DispatchAsyncRequest('GetCurrentYear', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TFramework_AsyncProxy.Invoke_GetHistoryYearPeriod(const _MySoapHeader: MySoapHeader);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('GetHistoryYearPeriod');

    lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                               'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                               'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                               'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                               'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                               'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetHistoryYearPeriod', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                               '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                               'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                               'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                               'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                               'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                               'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetHistoryYearPeriod', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetHistoryYearPeriod');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    __DispatchAsyncRequest('GetHistoryYearPeriod', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TFramework_AsyncProxy.Invoke_GetServerID(const _MySoapHeader: MySoapHeader);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('GetServerID');

    lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                               'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                               'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                               'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                               'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                               'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetServerID', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                               '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                               'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                               'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                               'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                               'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                               'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetServerID', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetServerID');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    __DispatchAsyncRequest('GetServerID', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TFramework_AsyncProxy.Invoke_Login(const _MySoapHeader: MySoapHeader; const loginName: WideString_Optional; const loginPassword: WideString_Optional);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('Login');

    lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                               'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                               'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                               'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                               'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                               'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/Login', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', '*', 
                                               'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                               'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                               'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                               'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                               'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                               'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'Login', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'Login');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('loginName', System.TypeInfo(WideString_Optional), loginName, []);
    lMessage.Write('loginPassword', System.TypeInfo(WideString_Optional), loginPassword, []);
    __DispatchAsyncRequest('Login', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TFramework_AsyncProxy.Invoke_GetUserInforMation(const _MySoapHeader: MySoapHeader; const loginName: WideString_Optional);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('GetUserInforMation');

    lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                               'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                               'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                               'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                               'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                               'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetUserInforMation', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                               '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                               'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                               'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                               'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                               'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                               'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetUserInforMation', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetUserInforMation');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('loginName', System.TypeInfo(WideString_Optional), loginName, []);
    __DispatchAsyncRequest('GetUserInforMation', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TFramework_AsyncProxy.Invoke_GetApplicationForUser(const _MySoapHeader: MySoapHeader; const userID: Int64; const appTypeID: Int64);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('GetApplicationForUser');

    lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                               'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                               'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                               'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                               'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                               'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetApplicationForUser', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                               '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                               'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                               'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                               'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                               'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                               'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetApplicationForUser', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetApplicationForUser');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('userID', System.TypeInfo(Int64), userID, []);
    lMessage.Write('appTypeID', System.TypeInfo(Int64), appTypeID, []);
    __DispatchAsyncRequest('GetApplicationForUser', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TFramework_AsyncProxy.Invoke_GetApplicationForAppByUser(const _MySoapHeader: MySoapHeader; const userID: Int64; const parentID: Int64; const appTypeID: Int64; const menuType: WideString_Optional);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('GetApplicationForAppByUser');

    lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                               'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                               'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                               'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                               'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                               'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetApplicationForAppByUser', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                               '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                               'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                               'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                               'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                               'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                               'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetApplicationForAppByUser', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetApplicationForAppByUser');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('userID', System.TypeInfo(Int64), userID, []);
    lMessage.Write('parentID', System.TypeInfo(Int64), parentID, []);
    lMessage.Write('appTypeID', System.TypeInfo(Int64), appTypeID, []);
    lMessage.Write('menuType', System.TypeInfo(WideString_Optional), menuType, []);
    __DispatchAsyncRequest('GetApplicationForAppByUser', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TFramework_AsyncProxy.Invoke_GetModuleForUser(const _MySoapHeader: MySoapHeader; const userID: Int64; const applicationID: Int64; const appTypeID: Int64);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('GetModuleForUser');

    lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                               'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                               'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                               'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                               'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                               'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetModuleForUser', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                               '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                               'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                               'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                               'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                               'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                               'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetModuleForUser', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetModuleForUser');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('userID', System.TypeInfo(Int64), userID, []);
    lMessage.Write('applicationID', System.TypeInfo(Int64), applicationID, []);
    lMessage.Write('appTypeID', System.TypeInfo(Int64), appTypeID, []);
    __DispatchAsyncRequest('GetModuleForUser', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TFramework_AsyncProxy.Invoke_GetApplicationOperationForUser(const _MySoapHeader: MySoapHeader; const userID: Int64; const applicationID: Int64);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('GetApplicationOperationForUser');

    lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                               'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                               'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                               'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                               'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                               'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetApplicationOperationForUser', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                               '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                               'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                               'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                               'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                               'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                               'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetApplicationOperationForUser', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetApplicationOperationForUser');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('userID', System.TypeInfo(Int64), userID, []);
    lMessage.Write('applicationID', System.TypeInfo(Int64), applicationID, []);
    __DispatchAsyncRequest('GetApplicationOperationForUser', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TFramework_AsyncProxy.Invoke_P_Sys_GetDepot(const _MySoapHeader: MySoapHeader; const companyIDs: UnicodeString; const companyID: UnicodeString; const depotTypeID: UnicodeString; const depotCategoryID: UnicodeString; 
                                                      const userID: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('P_Sys_GetDepot');

    lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                               'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                               'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                               'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                               'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                               'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/P_Sys_GetDepot', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                               '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                               'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                               'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                               'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                               'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                               'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'P_Sys_GetDepot', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'P_Sys_GetDepot');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('companyIDs', System.TypeInfo(UnicodeString), companyIDs, []);
    lMessage.Write('companyID', System.TypeInfo(UnicodeString), companyID, []);
    lMessage.Write('depotTypeID', System.TypeInfo(UnicodeString), depotTypeID, []);
    lMessage.Write('depotCategoryID', System.TypeInfo(UnicodeString), depotCategoryID, []);
    lMessage.Write('userID', System.TypeInfo(UnicodeString), userID, []);
    __DispatchAsyncRequest('P_Sys_GetDepot', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TFramework_AsyncProxy.Invoke_GetUserManageOrganization(const _MySoapHeader: MySoapHeader; const userID: Int64; const operationType: Integer; const organizationTypeID: Int64);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('GetUserManageOrganization');

    lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                               'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                               'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                               'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                               'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                               'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetUserManageOrganization', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                               '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                               'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                               'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                               'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                               'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                               'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetUserManageOrganization', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetUserManageOrganization');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('userID', System.TypeInfo(Int64), userID, []);
    lMessage.Write('operationType', System.TypeInfo(Integer), operationType, []);
    lMessage.Write('organizationTypeID', System.TypeInfo(Int64), organizationTypeID, []);
    __DispatchAsyncRequest('GetUserManageOrganization', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TFramework_AsyncProxy.Invoke_GetUserManageCompany(const _MySoapHeader: MySoapHeader; const userID: Int64; const operationType: Integer);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('GetUserManageCompany');

    lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                               'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                               'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                               'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                               'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                               'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetUserManageCompany', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                               '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                               'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                               'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                               'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                               'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                               'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetUserManageCompany', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetUserManageCompany');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('userID', System.TypeInfo(Int64), userID, []);
    lMessage.Write('operationType', System.TypeInfo(Integer), operationType, []);
    __DispatchAsyncRequest('GetUserManageCompany', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TFramework_AsyncProxy.Invoke_GetUserManageFactory(const _MySoapHeader: MySoapHeader; const userID: Int64; const operationType: Integer);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('GetUserManageFactory');

    lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                               'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                               'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                               'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                               'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                               'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetUserManageFactory', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                               '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                               'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                               'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                               'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                               'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                               'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetUserManageFactory', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetUserManageFactory');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('userID', System.TypeInfo(Int64), userID, []);
    lMessage.Write('operationType', System.TypeInfo(Integer), operationType, []);
    __DispatchAsyncRequest('GetUserManageFactory', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TFramework_AsyncProxy.Invoke_GetAndroidAppVersion(const _MySoapHeader: MySoapHeader);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('GetAndroidAppVersion');

    lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 
                                               'remap_getapplicationforappbyuser', 'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 
                                               'remap_getcurrentdatetime', 'remap_getcurrentyear', 'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 
                                               'remap_getserverid', 'remap_getuserinformation', 'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 
                                               'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                                               'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetAndroidAppVersion', 'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', 
                                               '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 'http://tempuri.org/GetApplicationForAppByUser', 
                                               'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 'http://tempuri.org/GetBillNumber', 
                                               'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 
                                               'http://tempuri.org/GetUserInforMation', 'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 
                                               'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 
                                               'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetAndroidAppVersion', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetAndroidAppVersion');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    __DispatchAsyncRequest('GetAndroidAppVersion', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TFramework_AsyncProxy.Retrieve_GetBillID: WideString_Optional;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('GetBillID');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('GetBillIDResult', System.TypeInfo(WideString_Optional), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxy.Retrieve_P_Sale_SaleDeptByOrgID: WideString_Optional;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('P_Sale_SaleDeptByOrgID');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('P_Sale_SaleDeptByOrgIDResult', System.TypeInfo(WideString_Optional), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxy.Retrieve_F_Sys_GetUserRetrieveOrg: WideString_Optional;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('F_Sys_GetUserRetrieveOrg');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('F_Sys_GetUserRetrieveOrgResult', System.TypeInfo(WideString_Optional), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxy.Retrieve_P_Sale_SalerByOrgID: WideString_Optional;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('P_Sale_SalerByOrgID');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('P_Sale_SalerByOrgIDResult', System.TypeInfo(WideString_Optional), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxy.Retrieve_P_Sale_GetCustomerBySaleManID: WideString_Optional;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('P_Sale_GetCustomerBySaleManID');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('P_Sale_GetCustomerBySaleManIDResult', System.TypeInfo(WideString_Optional), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxy.Retrieve_GetBillNumber: WideString_Optional;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('GetBillNumber');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('GetBillNumberResult', System.TypeInfo(WideString_Optional), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxy.Retrieve_GetCurrentDateTime: WideString_Optional;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('GetCurrentDateTime');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('GetCurrentDateTimeResult', System.TypeInfo(WideString_Optional), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxy.Retrieve_GetCurrentDate: WideString_Optional;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('GetCurrentDate');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('GetCurrentDateResult', System.TypeInfo(WideString_Optional), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxy.Retrieve_ChangeUserPassword: WideString_Optional;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('ChangeUserPassword');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('ChangeUserPasswordResult', System.TypeInfo(WideString_Optional), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxy.Retrieve_GetCurrentYearPeriodByDate: WideString_Optional;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('GetCurrentYearPeriodByDate');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('GetCurrentYearPeriodByDateResult', System.TypeInfo(WideString_Optional), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxy.Retrieve_GetCurrentYearPeriod: WideString_Optional;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('GetCurrentYearPeriod');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('GetCurrentYearPeriodResult', System.TypeInfo(WideString_Optional), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxy.Retrieve_GetCurrentYear: WideString_Optional;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('GetCurrentYear');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('GetCurrentYearResult', System.TypeInfo(WideString_Optional), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxy.Retrieve_GetHistoryYearPeriod: WideString_Optional;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('GetHistoryYearPeriod');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('GetHistoryYearPeriodResult', System.TypeInfo(WideString_Optional), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxy.Retrieve_GetServerID: WideString_Optional;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('GetServerID');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('GetServerIDResult', System.TypeInfo(WideString_Optional), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxy.Retrieve_Login: WideString_Optional;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('Login');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('LoginResult', System.TypeInfo(WideString_Optional), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxy.Retrieve_GetUserInforMation: WideString_Optional;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('GetUserInforMation');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('GetUserInforMationResult', System.TypeInfo(WideString_Optional), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxy.Retrieve_GetApplicationForUser: WideString_Optional;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('GetApplicationForUser');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('GetApplicationForUserResult', System.TypeInfo(WideString_Optional), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxy.Retrieve_GetApplicationForAppByUser: WideString_Optional;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('GetApplicationForAppByUser');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('GetApplicationForAppByUserResult', System.TypeInfo(WideString_Optional), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxy.Retrieve_GetModuleForUser: WideString_Optional;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('GetModuleForUser');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('GetModuleForUserResult', System.TypeInfo(WideString_Optional), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxy.Retrieve_GetApplicationOperationForUser: WideString_Optional;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('GetApplicationOperationForUser');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('GetApplicationOperationForUserResult', System.TypeInfo(WideString_Optional), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxy.Retrieve_P_Sys_GetDepot: UnicodeString;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: UnicodeString;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('P_Sys_GetDepot');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('P_Sys_GetDepotResult', System.TypeInfo(UnicodeString), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxy.Retrieve_GetUserManageOrganization: WideString_Optional;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('GetUserManageOrganization');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('GetUserManageOrganizationResult', System.TypeInfo(WideString_Optional), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxy.Retrieve_GetUserManageCompany: WideString_Optional;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('GetUserManageCompany');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('GetUserManageCompanyResult', System.TypeInfo(WideString_Optional), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxy.Retrieve_GetUserManageFactory: WideString_Optional;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('GetUserManageFactory');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('GetUserManageFactoryResult', System.TypeInfo(WideString_Optional), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxy.Retrieve_GetAndroidAppVersion: WideString_Optional;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('GetAndroidAppVersion');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('GetAndroidAppVersionResult', System.TypeInfo(WideString_Optional), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.__GetInterfaceName: String;
begin
  result := 'Framework';
  exit;
end;

function TFramework_AsyncProxyEx.BeginGetBillID(const _MySoapHeader: MySoapHeader; const keyName: WideString_Optional; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 'remap_getapplicationforappbyuser', 
                               'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 'remap_getcurrentdatetime', 'remap_getcurrentyear', 
                               'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 'remap_getserverid', 'remap_getuserinformation', 
                               'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 
                               'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetBillID', 
                               'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 
                               'http://tempuri.org/GetApplicationForAppByUser', 'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 
                               'http://tempuri.org/GetBillNumber', 'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 'http://tempuri.org/GetUserInforMation', 
                               'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 
                               'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetBillID', 'http://tempuri.org/', 
                               'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetBillID');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('keyName', System.TypeInfo(WideString_Optional), keyName, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.BeginP_Sale_SaleDeptByOrgID(const _MySoapHeader: MySoapHeader; const FOrganizationID: WideString_Optional; const FTypeID: WideString_Optional; const aCallback: TROAsyncCallback; 
                                                             const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 'remap_getapplicationforappbyuser', 
                               'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 'remap_getcurrentdatetime', 'remap_getcurrentyear', 
                               'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 'remap_getserverid', 'remap_getuserinformation', 
                               'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 
                               'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/P_Sale_SaleDeptByOrgID', 
                               'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 
                               'http://tempuri.org/GetApplicationForAppByUser', 'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 
                               'http://tempuri.org/GetBillNumber', 'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 'http://tempuri.org/GetUserInforMation', 
                               'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 
                               'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'P_Sale_SaleDeptByOrgID', 
                               'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'P_Sale_SaleDeptByOrgID');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('FOrganizationID', System.TypeInfo(WideString_Optional), FOrganizationID, []);
    lMessage.Write('FTypeID', System.TypeInfo(WideString_Optional), FTypeID, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.BeginF_Sys_GetUserRetrieveOrg(const _MySoapHeader: MySoapHeader; const userID: WideString_Optional; const typeIDs: WideString_Optional; const aCallback: TROAsyncCallback; 
                                                               const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 'remap_getapplicationforappbyuser', 
                               'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 'remap_getcurrentdatetime', 'remap_getcurrentyear', 
                               'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 'remap_getserverid', 'remap_getuserinformation', 
                               'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 
                               'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/F_Sys_GetUserRetrieveOrg', 
                               'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 
                               'http://tempuri.org/GetApplicationForAppByUser', 'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 
                               'http://tempuri.org/GetBillNumber', 'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 'http://tempuri.org/GetUserInforMation', 
                               'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 
                               'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'F_Sys_GetUserRetrieveOrg', 
                               'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'F_Sys_GetUserRetrieveOrg');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('userID', System.TypeInfo(WideString_Optional), userID, []);
    lMessage.Write('typeIDs', System.TypeInfo(WideString_Optional), typeIDs, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.BeginP_Sale_SalerByOrgID(const _MySoapHeader: MySoapHeader; const FOrganizationID: Integer; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 'remap_getapplicationforappbyuser', 
                               'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 'remap_getcurrentdatetime', 'remap_getcurrentyear', 
                               'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 'remap_getserverid', 'remap_getuserinformation', 
                               'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 
                               'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/P_Sale_SalerByOrgID', 
                               'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 
                               'http://tempuri.org/GetApplicationForAppByUser', 'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 
                               'http://tempuri.org/GetBillNumber', 'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 'http://tempuri.org/GetUserInforMation', 
                               'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 
                               'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'P_Sale_SalerByOrgID', 
                               'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'P_Sale_SalerByOrgID');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('FOrganizationID', System.TypeInfo(Integer), FOrganizationID, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.BeginP_Sale_GetCustomerBySaleManID(const _MySoapHeader: MySoapHeader; const saleManID: Integer; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 'remap_getapplicationforappbyuser', 
                               'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 'remap_getcurrentdatetime', 'remap_getcurrentyear', 
                               'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 'remap_getserverid', 'remap_getuserinformation', 
                               'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 
                               'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/P_Sale_GetCustomerBySaleManID', 
                               'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 
                               'http://tempuri.org/GetApplicationForAppByUser', 'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 
                               'http://tempuri.org/GetBillNumber', 'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 'http://tempuri.org/GetUserInforMation', 
                               'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 
                               'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'P_Sale_GetCustomerBySaleManID', 
                               'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'P_Sale_GetCustomerBySaleManID');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('saleManID', System.TypeInfo(Integer), saleManID, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.BeginGetBillNumber(const _MySoapHeader: MySoapHeader; const keyName: WideString_Optional; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 'remap_getapplicationforappbyuser', 
                               'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 'remap_getcurrentdatetime', 'remap_getcurrentyear', 
                               'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 'remap_getserverid', 'remap_getuserinformation', 
                               'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 
                               'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetBillNumber', 
                               'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 
                               'http://tempuri.org/GetApplicationForAppByUser', 'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 
                               'http://tempuri.org/GetBillNumber', 'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 'http://tempuri.org/GetUserInforMation', 
                               'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 
                               'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetBillNumber', 'http://tempuri.org/', 
                               'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetBillNumber');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('keyName', System.TypeInfo(WideString_Optional), keyName, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.BeginGetCurrentDateTime(const _MySoapHeader: MySoapHeader; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 'remap_getapplicationforappbyuser', 
                               'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 'remap_getcurrentdatetime', 'remap_getcurrentyear', 
                               'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 'remap_getserverid', 'remap_getuserinformation', 
                               'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 
                               'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetCurrentDateTime', 
                               'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 
                               'http://tempuri.org/GetApplicationForAppByUser', 'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 
                               'http://tempuri.org/GetBillNumber', 'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 'http://tempuri.org/GetUserInforMation', 
                               'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 
                               'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetCurrentDateTime', 'http://tempuri.org/', 
                               'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetCurrentDateTime');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.BeginGetCurrentDate(const _MySoapHeader: MySoapHeader; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 'remap_getapplicationforappbyuser', 
                               'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 'remap_getcurrentdatetime', 'remap_getcurrentyear', 
                               'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 'remap_getserverid', 'remap_getuserinformation', 
                               'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 
                               'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetCurrentDate', 
                               'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 
                               'http://tempuri.org/GetApplicationForAppByUser', 'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 
                               'http://tempuri.org/GetBillNumber', 'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 'http://tempuri.org/GetUserInforMation', 
                               'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 
                               'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetCurrentDate', 'http://tempuri.org/', 
                               'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetCurrentDate');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.BeginChangeUserPassword(const _MySoapHeader: MySoapHeader; const oldPassword: WideString_Optional; const newPassword: WideString_Optional; const loginName: WideString_Optional; 
                                                         const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 'remap_getapplicationforappbyuser', 
                               'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 'remap_getcurrentdatetime', 'remap_getcurrentyear', 
                               'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 'remap_getserverid', 'remap_getuserinformation', 
                               'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 
                               'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/ChangeUserPassword', 
                               'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 
                               'http://tempuri.org/GetApplicationForAppByUser', 'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 
                               'http://tempuri.org/GetBillNumber', 'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 'http://tempuri.org/GetUserInforMation', 
                               'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 
                               'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'ChangeUserPassword', 'http://tempuri.org/', 
                               'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'ChangeUserPassword');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('oldPassword', System.TypeInfo(WideString_Optional), oldPassword, []);
    lMessage.Write('newPassword', System.TypeInfo(WideString_Optional), newPassword, []);
    lMessage.Write('loginName', System.TypeInfo(WideString_Optional), loginName, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.BeginGetCurrentYearPeriodByDate(const _MySoapHeader: MySoapHeader; const currentDateTime: DateTime; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 'remap_getapplicationforappbyuser', 
                               'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 'remap_getcurrentdatetime', 'remap_getcurrentyear', 
                               'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 'remap_getserverid', 'remap_getuserinformation', 
                               'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 
                               'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetCurrentYearPeriodByDate', 
                               'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 
                               'http://tempuri.org/GetApplicationForAppByUser', 'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 
                               'http://tempuri.org/GetBillNumber', 'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 'http://tempuri.org/GetUserInforMation', 
                               'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 
                               'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetCurrentYearPeriodByDate', 
                               'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetCurrentYearPeriodByDate');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('currentDateTime', System.TypeInfo(DateTime), currentDateTime, [paIsDateTime]);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.BeginGetCurrentYearPeriod(const _MySoapHeader: MySoapHeader; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 'remap_getapplicationforappbyuser', 
                               'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 'remap_getcurrentdatetime', 'remap_getcurrentyear', 
                               'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 'remap_getserverid', 'remap_getuserinformation', 
                               'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 
                               'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetCurrentYearPeriod', 
                               'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 
                               'http://tempuri.org/GetApplicationForAppByUser', 'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 
                               'http://tempuri.org/GetBillNumber', 'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 'http://tempuri.org/GetUserInforMation', 
                               'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 
                               'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetCurrentYearPeriod', 
                               'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetCurrentYearPeriod');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.BeginGetCurrentYear(const _MySoapHeader: MySoapHeader; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 'remap_getapplicationforappbyuser', 
                               'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 'remap_getcurrentdatetime', 'remap_getcurrentyear', 
                               'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 'remap_getserverid', 'remap_getuserinformation', 
                               'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 
                               'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetCurrentYear', 
                               'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 
                               'http://tempuri.org/GetApplicationForAppByUser', 'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 
                               'http://tempuri.org/GetBillNumber', 'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 'http://tempuri.org/GetUserInforMation', 
                               'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 
                               'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetCurrentYear', 'http://tempuri.org/', 
                               'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetCurrentYear');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.BeginGetHistoryYearPeriod(const _MySoapHeader: MySoapHeader; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 'remap_getapplicationforappbyuser', 
                               'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 'remap_getcurrentdatetime', 'remap_getcurrentyear', 
                               'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 'remap_getserverid', 'remap_getuserinformation', 
                               'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 
                               'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetHistoryYearPeriod', 
                               'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 
                               'http://tempuri.org/GetApplicationForAppByUser', 'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 
                               'http://tempuri.org/GetBillNumber', 'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 'http://tempuri.org/GetUserInforMation', 
                               'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 
                               'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetHistoryYearPeriod', 
                               'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetHistoryYearPeriod');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.BeginGetServerID(const _MySoapHeader: MySoapHeader; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 'remap_getapplicationforappbyuser', 
                               'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 'remap_getcurrentdatetime', 'remap_getcurrentyear', 
                               'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 'remap_getserverid', 'remap_getuserinformation', 
                               'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 
                               'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetServerID', 
                               'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 
                               'http://tempuri.org/GetApplicationForAppByUser', 'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 
                               'http://tempuri.org/GetBillNumber', 'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 'http://tempuri.org/GetUserInforMation', 
                               'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 
                               'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetServerID', 'http://tempuri.org/', 
                               'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetServerID');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.BeginLogin(const _MySoapHeader: MySoapHeader; const loginName: WideString_Optional; const loginPassword: WideString_Optional; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 'remap_getapplicationforappbyuser', 
                               'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 'remap_getcurrentdatetime', 'remap_getcurrentyear', 
                               'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 'remap_getserverid', 'remap_getuserinformation', 
                               'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 
                               'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/Login', 
                               'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 
                               'http://tempuri.org/GetApplicationForAppByUser', 'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 
                               'http://tempuri.org/GetBillNumber', 'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 'http://tempuri.org/GetUserInforMation', 
                               'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 
                               'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'Login', 'http://tempuri.org/', 
                               'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'Login');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('loginName', System.TypeInfo(WideString_Optional), loginName, []);
    lMessage.Write('loginPassword', System.TypeInfo(WideString_Optional), loginPassword, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.BeginGetUserInforMation(const _MySoapHeader: MySoapHeader; const loginName: WideString_Optional; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 'remap_getapplicationforappbyuser', 
                               'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 'remap_getcurrentdatetime', 'remap_getcurrentyear', 
                               'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 'remap_getserverid', 'remap_getuserinformation', 
                               'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 
                               'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetUserInforMation', 
                               'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 
                               'http://tempuri.org/GetApplicationForAppByUser', 'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 
                               'http://tempuri.org/GetBillNumber', 'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 'http://tempuri.org/GetUserInforMation', 
                               'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 
                               'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetUserInforMation', 'http://tempuri.org/', 
                               'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetUserInforMation');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('loginName', System.TypeInfo(WideString_Optional), loginName, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.BeginGetApplicationForUser(const _MySoapHeader: MySoapHeader; const userID: Int64; const appTypeID: Int64; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 'remap_getapplicationforappbyuser', 
                               'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 'remap_getcurrentdatetime', 'remap_getcurrentyear', 
                               'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 'remap_getserverid', 'remap_getuserinformation', 
                               'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 
                               'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetApplicationForUser', 
                               'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 
                               'http://tempuri.org/GetApplicationForAppByUser', 'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 
                               'http://tempuri.org/GetBillNumber', 'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 'http://tempuri.org/GetUserInforMation', 
                               'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 
                               'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetApplicationForUser', 
                               'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetApplicationForUser');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('userID', System.TypeInfo(Int64), userID, []);
    lMessage.Write('appTypeID', System.TypeInfo(Int64), appTypeID, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.BeginGetApplicationForAppByUser(const _MySoapHeader: MySoapHeader; const userID: Int64; const parentID: Int64; const appTypeID: Int64; const menuType: WideString_Optional; 
                                                                 const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 'remap_getapplicationforappbyuser', 
                               'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 'remap_getcurrentdatetime', 'remap_getcurrentyear', 
                               'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 'remap_getserverid', 'remap_getuserinformation', 
                               'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 
                               'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetApplicationForAppByUser', 
                               'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 
                               'http://tempuri.org/GetApplicationForAppByUser', 'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 
                               'http://tempuri.org/GetBillNumber', 'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 'http://tempuri.org/GetUserInforMation', 
                               'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 
                               'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetApplicationForAppByUser', 
                               'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetApplicationForAppByUser');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('userID', System.TypeInfo(Int64), userID, []);
    lMessage.Write('parentID', System.TypeInfo(Int64), parentID, []);
    lMessage.Write('appTypeID', System.TypeInfo(Int64), appTypeID, []);
    lMessage.Write('menuType', System.TypeInfo(WideString_Optional), menuType, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.BeginGetModuleForUser(const _MySoapHeader: MySoapHeader; const userID: Int64; const applicationID: Int64; const appTypeID: Int64; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 'remap_getapplicationforappbyuser', 
                               'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 'remap_getcurrentdatetime', 'remap_getcurrentyear', 
                               'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 'remap_getserverid', 'remap_getuserinformation', 
                               'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 
                               'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetModuleForUser', 
                               'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 
                               'http://tempuri.org/GetApplicationForAppByUser', 'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 
                               'http://tempuri.org/GetBillNumber', 'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 'http://tempuri.org/GetUserInforMation', 
                               'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 
                               'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetModuleForUser', 'http://tempuri.org/', 
                               'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetModuleForUser');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('userID', System.TypeInfo(Int64), userID, []);
    lMessage.Write('applicationID', System.TypeInfo(Int64), applicationID, []);
    lMessage.Write('appTypeID', System.TypeInfo(Int64), appTypeID, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.BeginGetApplicationOperationForUser(const _MySoapHeader: MySoapHeader; const userID: Int64; const applicationID: Int64; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 'remap_getapplicationforappbyuser', 
                               'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 'remap_getcurrentdatetime', 'remap_getcurrentyear', 
                               'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 'remap_getserverid', 'remap_getuserinformation', 
                               'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 
                               'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetApplicationOperationForUser', 
                               'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 
                               'http://tempuri.org/GetApplicationForAppByUser', 'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 
                               'http://tempuri.org/GetBillNumber', 'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 'http://tempuri.org/GetUserInforMation', 
                               'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 
                               'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetApplicationOperationForUser', 
                               'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetApplicationOperationForUser');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('userID', System.TypeInfo(Int64), userID, []);
    lMessage.Write('applicationID', System.TypeInfo(Int64), applicationID, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.BeginP_Sys_GetDepot(const _MySoapHeader: MySoapHeader; const companyIDs: UnicodeString; const companyID: UnicodeString; const depotTypeID: UnicodeString; const depotCategoryID: UnicodeString; 
                                                     const userID: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 'remap_getapplicationforappbyuser', 
                               'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 'remap_getcurrentdatetime', 'remap_getcurrentyear', 
                               'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 'remap_getserverid', 'remap_getuserinformation', 
                               'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 
                               'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/P_Sys_GetDepot', 
                               'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 
                               'http://tempuri.org/GetApplicationForAppByUser', 'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 
                               'http://tempuri.org/GetBillNumber', 'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 'http://tempuri.org/GetUserInforMation', 
                               'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 
                               'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'P_Sys_GetDepot', 'http://tempuri.org/', 
                               'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'P_Sys_GetDepot');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('companyIDs', System.TypeInfo(UnicodeString), companyIDs, []);
    lMessage.Write('companyID', System.TypeInfo(UnicodeString), companyID, []);
    lMessage.Write('depotTypeID', System.TypeInfo(UnicodeString), depotTypeID, []);
    lMessage.Write('depotCategoryID', System.TypeInfo(UnicodeString), depotCategoryID, []);
    lMessage.Write('userID', System.TypeInfo(UnicodeString), userID, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.BeginGetUserManageOrganization(const _MySoapHeader: MySoapHeader; const userID: Int64; const operationType: Integer; const organizationTypeID: Int64; const aCallback: TROAsyncCallback; 
                                                                const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 'remap_getapplicationforappbyuser', 
                               'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 'remap_getcurrentdatetime', 'remap_getcurrentyear', 
                               'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 'remap_getserverid', 'remap_getuserinformation', 
                               'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 
                               'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetUserManageOrganization', 
                               'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 
                               'http://tempuri.org/GetApplicationForAppByUser', 'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 
                               'http://tempuri.org/GetBillNumber', 'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 'http://tempuri.org/GetUserInforMation', 
                               'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 
                               'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetUserManageOrganization', 
                               'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetUserManageOrganization');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('userID', System.TypeInfo(Int64), userID, []);
    lMessage.Write('operationType', System.TypeInfo(Integer), operationType, []);
    lMessage.Write('organizationTypeID', System.TypeInfo(Int64), organizationTypeID, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.BeginGetUserManageCompany(const _MySoapHeader: MySoapHeader; const userID: Int64; const operationType: Integer; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 'remap_getapplicationforappbyuser', 
                               'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 'remap_getcurrentdatetime', 'remap_getcurrentyear', 
                               'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 'remap_getserverid', 'remap_getuserinformation', 
                               'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 
                               'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetUserManageCompany', 
                               'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 
                               'http://tempuri.org/GetApplicationForAppByUser', 'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 
                               'http://tempuri.org/GetBillNumber', 'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 'http://tempuri.org/GetUserInforMation', 
                               'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 
                               'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetUserManageCompany', 
                               'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetUserManageCompany');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('userID', System.TypeInfo(Int64), userID, []);
    lMessage.Write('operationType', System.TypeInfo(Integer), operationType, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.BeginGetUserManageFactory(const _MySoapHeader: MySoapHeader; const userID: Int64; const operationType: Integer; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 'remap_getapplicationforappbyuser', 
                               'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 'remap_getcurrentdatetime', 'remap_getcurrentyear', 
                               'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 'remap_getserverid', 'remap_getuserinformation', 
                               'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 
                               'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetUserManageFactory', 
                               'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 
                               'http://tempuri.org/GetApplicationForAppByUser', 'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 
                               'http://tempuri.org/GetBillNumber', 'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 'http://tempuri.org/GetUserInforMation', 
                               'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 
                               'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetUserManageFactory', 
                               'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetUserManageFactory');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('userID', System.TypeInfo(Int64), userID, []);
    lMessage.Write('operationType', System.TypeInfo(Integer), operationType, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.BeginGetAndroidAppVersion(const _MySoapHeader: MySoapHeader; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_changeuserpassword', 'remap_f_sys_getuserretrieveorg', 'remap_getandroidappversion', 'remap_getapplicationforappbyuser', 
                               'remap_getapplicationforuser', 'remap_getapplicationoperationforuser', 'remap_getbillid', 'remap_getbillnumber', 'remap_getcurrentdate', 'remap_getcurrentdatetime', 'remap_getcurrentyear', 
                               'remap_getcurrentyearperiod', 'remap_getcurrentyearperiodbydate', 'remap_gethistoryyearperiod', 'remap_getmoduleforuser', 'remap_getserverid', 'remap_getuserinformation', 
                               'remap_getusermanagecompany', 'remap_getusermanagefactory', 'remap_getusermanageorganization', 'remap_login', 'remap_p_sale_getcustomerbysalemanid', 'remap_p_sale_saledeptbyorgid', 
                               'remap_p_sale_salerbyorgid', 'remap_p_sys_getdepot', 'soapinputmessagenamespace', 'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/GetAndroidAppVersion', 
                               'MySoapHeader', 'http://110.52.60.19:6690/Shares/Framework.asmx', '*', 'http://tempuri.org/ChangeUserPassword', 'http://tempuri.org/F_Sys_GetUserRetrieveOrg', 'http://tempuri.org/GetAndroidAppVersion', 
                               'http://tempuri.org/GetApplicationForAppByUser', 'http://tempuri.org/GetApplicationForUser', 'http://tempuri.org/GetApplicationOperationForUser', 'http://tempuri.org/GetBillID', 
                               'http://tempuri.org/GetBillNumber', 'http://tempuri.org/GetCurrentDate', 'http://tempuri.org/GetCurrentDateTime', 'http://tempuri.org/GetCurrentYear', 'http://tempuri.org/GetCurrentYearPeriod', 
                               'http://tempuri.org/GetCurrentYearPeriodByDate', 'http://tempuri.org/GetHistoryYearPeriod', 'http://tempuri.org/GetModuleForUser', 'http://tempuri.org/GetServerID', 'http://tempuri.org/GetUserInforMation', 
                               'http://tempuri.org/GetUserManageCompany', 'http://tempuri.org/GetUserManageFactory', 'http://tempuri.org/GetUserManageOrganization', 'http://tempuri.org/Login', 'http://tempuri.org/P_Sale_GetCustomerBySaleManID', 
                               'http://tempuri.org/P_Sale_SaleDeptByOrgID', 'http://tempuri.org/P_Sale_SalerByOrgID', 'http://tempuri.org/P_Sys_GetDepot', 'http://tempuri.org/', 'GetAndroidAppVersion', 
                               'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'Framework', __InterfaceName, 'GetAndroidAppVersion');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.EndGetBillID(const aRequest: IROAsyncRequest): WideString_Optional;
var
  lResult: WideString_Optional;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('GetBillIDResult', System.TypeInfo(WideString_Optional), lResult, []);
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.EndP_Sale_SaleDeptByOrgID(const aRequest: IROAsyncRequest): WideString_Optional;
var
  lResult: WideString_Optional;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('P_Sale_SaleDeptByOrgIDResult', System.TypeInfo(WideString_Optional), lResult, []);
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.EndF_Sys_GetUserRetrieveOrg(const aRequest: IROAsyncRequest): WideString_Optional;
var
  lResult: WideString_Optional;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('F_Sys_GetUserRetrieveOrgResult', System.TypeInfo(WideString_Optional), lResult, []);
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.EndP_Sale_SalerByOrgID(const aRequest: IROAsyncRequest): WideString_Optional;
var
  lResult: WideString_Optional;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('P_Sale_SalerByOrgIDResult', System.TypeInfo(WideString_Optional), lResult, []);
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.EndP_Sale_GetCustomerBySaleManID(const aRequest: IROAsyncRequest): WideString_Optional;
var
  lResult: WideString_Optional;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('P_Sale_GetCustomerBySaleManIDResult', System.TypeInfo(WideString_Optional), lResult, []);
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.EndGetBillNumber(const aRequest: IROAsyncRequest): WideString_Optional;
var
  lResult: WideString_Optional;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('GetBillNumberResult', System.TypeInfo(WideString_Optional), lResult, []);
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.EndGetCurrentDateTime(const aRequest: IROAsyncRequest): WideString_Optional;
var
  lResult: WideString_Optional;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('GetCurrentDateTimeResult', System.TypeInfo(WideString_Optional), lResult, []);
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.EndGetCurrentDate(const aRequest: IROAsyncRequest): WideString_Optional;
var
  lResult: WideString_Optional;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('GetCurrentDateResult', System.TypeInfo(WideString_Optional), lResult, []);
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.EndChangeUserPassword(const aRequest: IROAsyncRequest): WideString_Optional;
var
  lResult: WideString_Optional;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('ChangeUserPasswordResult', System.TypeInfo(WideString_Optional), lResult, []);
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.EndGetCurrentYearPeriodByDate(const aRequest: IROAsyncRequest): WideString_Optional;
var
  lResult: WideString_Optional;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('GetCurrentYearPeriodByDateResult', System.TypeInfo(WideString_Optional), lResult, []);
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.EndGetCurrentYearPeriod(const aRequest: IROAsyncRequest): WideString_Optional;
var
  lResult: WideString_Optional;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('GetCurrentYearPeriodResult', System.TypeInfo(WideString_Optional), lResult, []);
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.EndGetCurrentYear(const aRequest: IROAsyncRequest): WideString_Optional;
var
  lResult: WideString_Optional;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('GetCurrentYearResult', System.TypeInfo(WideString_Optional), lResult, []);
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.EndGetHistoryYearPeriod(const aRequest: IROAsyncRequest): WideString_Optional;
var
  lResult: WideString_Optional;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('GetHistoryYearPeriodResult', System.TypeInfo(WideString_Optional), lResult, []);
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.EndGetServerID(const aRequest: IROAsyncRequest): WideString_Optional;
var
  lResult: WideString_Optional;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('GetServerIDResult', System.TypeInfo(WideString_Optional), lResult, []);
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.EndLogin(const aRequest: IROAsyncRequest): WideString_Optional;
var
  lResult: WideString_Optional;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('LoginResult', System.TypeInfo(WideString_Optional), lResult, []);
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.EndGetUserInforMation(const aRequest: IROAsyncRequest): WideString_Optional;
var
  lResult: WideString_Optional;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('GetUserInforMationResult', System.TypeInfo(WideString_Optional), lResult, []);
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.EndGetApplicationForUser(const aRequest: IROAsyncRequest): WideString_Optional;
var
  lResult: WideString_Optional;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('GetApplicationForUserResult', System.TypeInfo(WideString_Optional), lResult, []);
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.EndGetApplicationForAppByUser(const aRequest: IROAsyncRequest): WideString_Optional;
var
  lResult: WideString_Optional;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('GetApplicationForAppByUserResult', System.TypeInfo(WideString_Optional), lResult, []);
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.EndGetModuleForUser(const aRequest: IROAsyncRequest): WideString_Optional;
var
  lResult: WideString_Optional;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('GetModuleForUserResult', System.TypeInfo(WideString_Optional), lResult, []);
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.EndGetApplicationOperationForUser(const aRequest: IROAsyncRequest): WideString_Optional;
var
  lResult: WideString_Optional;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('GetApplicationOperationForUserResult', System.TypeInfo(WideString_Optional), lResult, []);
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.EndP_Sys_GetDepot(const aRequest: IROAsyncRequest): UnicodeString;
var
  lResult: UnicodeString;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('P_Sys_GetDepotResult', System.TypeInfo(UnicodeString), lResult, []);
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.EndGetUserManageOrganization(const aRequest: IROAsyncRequest): WideString_Optional;
var
  lResult: WideString_Optional;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('GetUserManageOrganizationResult', System.TypeInfo(WideString_Optional), lResult, []);
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.EndGetUserManageCompany(const aRequest: IROAsyncRequest): WideString_Optional;
var
  lResult: WideString_Optional;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('GetUserManageCompanyResult', System.TypeInfo(WideString_Optional), lResult, []);
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.EndGetUserManageFactory(const aRequest: IROAsyncRequest): WideString_Optional;
var
  lResult: WideString_Optional;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('GetUserManageFactoryResult', System.TypeInfo(WideString_Optional), lResult, []);
  result := lResult;
  exit;
end;

function TFramework_AsyncProxyEx.EndGetAndroidAppVersion(const aRequest: IROAsyncRequest): WideString_Optional;
var
  lResult: WideString_Optional;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('GetAndroidAppVersionResult', System.TypeInfo(WideString_Optional), lResult, []);
  result := lResult;
  exit;
end;

initialization
  RegisterProxyClass(IFramework_IID, TFramework_Proxy);
finalization
  UnregisterProxyClass(IFramework_IID);
end.
