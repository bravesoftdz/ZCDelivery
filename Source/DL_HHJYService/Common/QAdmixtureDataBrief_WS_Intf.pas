unit QAdmixtureDataBrief_WS_Intf;

// ----------------------------------------------------------------------
//  This file was automatically generated by RemObjects SDK from a
//  RODL file downloaded from a server or associated with this project.
// 
//  Do not modify this file manually, or your changes will be lost when
//  it is regenerated the next time you update your RODL.
// ----------------------------------------------------------------------

{$I RemObjects.inc}

interface

uses
  {$IFDEF DELPHIXE2UP}System.SysUtils{$ELSE}SysUtils{$ENDIF},
  {$IFDEF DELPHIXE2UP}System.Classes{$ELSE}Classes{$ENDIF},
  {$IFDEF DELPHIXE2UP}System.TypInfo{$ELSE}TypInfo{$ENDIF},
  uROUri,
  uROProxy,
  uROExceptions,
  uROXMLIntf,
  uROClasses,
  uROTypes,
  uROClientIntf,
  uROAsync,
  uROEventReceiver, V_Sys_Materiel_Intf;

const LibraryUID = '{1061692D-19DE-4C95-910F-D5A8FDAAE8F0}';
const TargetNamespace = 'QAdmixtureDataBrief_WS';
const IQAdmixtureDataBrief_WS_IID: TGUID = '{0EC88EC4-4A8C-4BAB-97E1-2A066D469C8F}';
const QAdmixtureDataBrief_WS_EndPointURI = 'http://110.52.60.19:6690/Quality/Ingredient/QAdmixtureDataBrief_WS.asmx';
type
  { Forward declarations }
  IQAdmixtureDataBrief_WS = interface;
  IQAdmixtureDataBrief_WS_Async = interface;
  IQAdmixtureDataBrief_WS_AsyncEx = interface;
  CoQAdmixtureDataBrief_WS = class;
  CoQAdmixtureDataBrief_WS_Async = class;
  CoQAdmixtureDataBrief_WS_AsyncEx = class;
  TQAdmixtureDataBrief_WS_Proxy = class;
  TQAdmixtureDataBrief_WS_AsyncProxy = class;
  TQAdmixtureDataBrief_WS_AsyncProxyEx = class;

  IQAdmixtureDataBrief_WS = interface(IROService)
  ['{0ec88ec4-4a8c-4bab-97e1-2a066d469c8f}']
    function InitializationModel(const _MySoapHeader: MySoapHeader): WideString_Optional;
    function InitializationModelList(const _MySoapHeader: MySoapHeader; const length: Integer): WideString_Optional;
    function Insert(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional): WideString_Optional;
    function InsertList(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional): WideString_Optional;
    function DeleteList(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional): WideString_Optional;
    function Delete(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional): WideString_Optional;
    function Update(const _MySoapHeader: MySoapHeader; const initJsonString: WideString_Optional; const newJsonString: WideString_Optional): WideString_Optional;
    function UpdateList(const _MySoapHeader: MySoapHeader; const initJsonString: WideString_Optional; const newJsonString: WideString_Optional): WideString_Optional;
    function RetrieveList(const _MySoapHeader: MySoapHeader; const where: UnicodeString; const sort: UnicodeString): UnicodeString;
    function RetrieveListByPaging(const _MySoapHeader: MySoapHeader; const where: WideString_Optional; const sort: WideString_Optional; const pageNumber: Integer; const pageSize: Integer; const groupParameters: WideString_Optional): WideString_Optional;
    function IsExists(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional): WideString_Optional;
  end;

  IQAdmixtureDataBrief_WS_Async = interface(IROAsyncInterface)
  ['{b4944701-e97a-471c-bc77-be02b5971fb7}']
    procedure Invoke_InitializationModel(const _MySoapHeader: MySoapHeader);
    procedure Invoke_InitializationModelList(const _MySoapHeader: MySoapHeader; const length: Integer);
    procedure Invoke_Insert(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional);
    procedure Invoke_InsertList(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional);
    procedure Invoke_DeleteList(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional);
    procedure Invoke_Delete(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional);
    procedure Invoke_Update(const _MySoapHeader: MySoapHeader; const initJsonString: WideString_Optional; const newJsonString: WideString_Optional);
    procedure Invoke_UpdateList(const _MySoapHeader: MySoapHeader; const initJsonString: WideString_Optional; const newJsonString: WideString_Optional);
    procedure Invoke_RetrieveList(const _MySoapHeader: MySoapHeader; const where: UnicodeString; const sort: UnicodeString);
    procedure Invoke_RetrieveListByPaging(const _MySoapHeader: MySoapHeader; const where: WideString_Optional; const sort: WideString_Optional; const pageNumber: Integer; const pageSize: Integer; const groupParameters: WideString_Optional);
    procedure Invoke_IsExists(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional);
    function Retrieve_InitializationModel: WideString_Optional;
    function Retrieve_InitializationModelList: WideString_Optional;
    function Retrieve_Insert: WideString_Optional;
    function Retrieve_InsertList: WideString_Optional;
    function Retrieve_DeleteList: WideString_Optional;
    function Retrieve_Delete: WideString_Optional;
    function Retrieve_Update: WideString_Optional;
    function Retrieve_UpdateList: WideString_Optional;
    function Retrieve_RetrieveList: UnicodeString;
    function Retrieve_RetrieveListByPaging: WideString_Optional;
    function Retrieve_IsExists: WideString_Optional;
  end;

  IQAdmixtureDataBrief_WS_AsyncEx = interface(IROAsyncInterfaceEx)
  ['{214b8825-fc78-4a64-bb93-5aee51561cf8}']
    function BeginInitializationModel(const _MySoapHeader: MySoapHeader; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginInitializationModelList(const _MySoapHeader: MySoapHeader; const length: Integer; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginInsert(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginInsertList(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginDeleteList(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginDelete(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginUpdate(const _MySoapHeader: MySoapHeader; const initJsonString: WideString_Optional; const newJsonString: WideString_Optional; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginUpdateList(const _MySoapHeader: MySoapHeader; const initJsonString: WideString_Optional; const newJsonString: WideString_Optional; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRetrieveList(const _MySoapHeader: MySoapHeader; const where: UnicodeString; const sort: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRetrieveListByPaging(const _MySoapHeader: MySoapHeader; const where: WideString_Optional; const sort: WideString_Optional; const pageNumber: Integer; const pageSize: Integer; const groupParameters: WideString_Optional; 
                                       const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginIsExists(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function EndInitializationModel(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndInitializationModelList(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndInsert(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndInsertList(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndDeleteList(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndDelete(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndUpdate(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndUpdateList(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndRetrieveList(const aRequest: IROAsyncRequest): UnicodeString;
    function EndRetrieveListByPaging(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndIsExists(const aRequest: IROAsyncRequest): WideString_Optional;
  end;

  CoQAdmixtureDataBrief_WS = class(System.TObject)
  public
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IQAdmixtureDataBrief_WS; overload;
    class function Create(const aUri: TROUri): IQAdmixtureDataBrief_WS; overload;
    class function Create(const aUrl: String): IQAdmixtureDataBrief_WS; overload;
  end;

  CoQAdmixtureDataBrief_WS_Async = class(System.TObject)
  public
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IQAdmixtureDataBrief_WS_Async; overload;
    class function Create(const aUri: TROUri): IQAdmixtureDataBrief_WS_Async; overload;
    class function Create(const aUrl: String): IQAdmixtureDataBrief_WS_Async; overload;
  end;

  CoQAdmixtureDataBrief_WS_AsyncEx = class(System.TObject)
  public
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IQAdmixtureDataBrief_WS_AsyncEx; overload;
    class function Create(const aUri: TROUri): IQAdmixtureDataBrief_WS_AsyncEx; overload;
    class function Create(const aUrl: String): IQAdmixtureDataBrief_WS_AsyncEx; overload;
  end;

  TQAdmixtureDataBrief_WS_Proxy = class(TROProxy, IQAdmixtureDataBrief_WS)
  protected
    function __GetInterfaceName: String; override; 
    function InitializationModel(const _MySoapHeader: MySoapHeader): WideString_Optional;
    function InitializationModelList(const _MySoapHeader: MySoapHeader; const length: Integer): WideString_Optional;
    function Insert(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional): WideString_Optional;
    function InsertList(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional): WideString_Optional;
    function DeleteList(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional): WideString_Optional;
    function Delete(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional): WideString_Optional;
    function Update(const _MySoapHeader: MySoapHeader; const initJsonString: WideString_Optional; const newJsonString: WideString_Optional): WideString_Optional;
    function UpdateList(const _MySoapHeader: MySoapHeader; const initJsonString: WideString_Optional; const newJsonString: WideString_Optional): WideString_Optional;
    function RetrieveList(const _MySoapHeader: MySoapHeader; const where: UnicodeString; const sort: UnicodeString): UnicodeString;
    function RetrieveListByPaging(const _MySoapHeader: MySoapHeader; const where: WideString_Optional; const sort: WideString_Optional; const pageNumber: Integer; const pageSize: Integer; const groupParameters: WideString_Optional): WideString_Optional;
    function IsExists(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional): WideString_Optional;
  end;

  TQAdmixtureDataBrief_WS_AsyncProxy = class(TROAsyncProxy, IQAdmixtureDataBrief_WS_Async)
  protected
    function __GetInterfaceName: String; override; 
    procedure Invoke_InitializationModel(const _MySoapHeader: MySoapHeader);
    procedure Invoke_InitializationModelList(const _MySoapHeader: MySoapHeader; const length: Integer);
    procedure Invoke_Insert(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional);
    procedure Invoke_InsertList(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional);
    procedure Invoke_DeleteList(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional);
    procedure Invoke_Delete(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional);
    procedure Invoke_Update(const _MySoapHeader: MySoapHeader; const initJsonString: WideString_Optional; const newJsonString: WideString_Optional);
    procedure Invoke_UpdateList(const _MySoapHeader: MySoapHeader; const initJsonString: WideString_Optional; const newJsonString: WideString_Optional);
    procedure Invoke_RetrieveList(const _MySoapHeader: MySoapHeader; const where: UnicodeString; const sort: UnicodeString);
    procedure Invoke_RetrieveListByPaging(const _MySoapHeader: MySoapHeader; const where: WideString_Optional; const sort: WideString_Optional; const pageNumber: Integer; const pageSize: Integer; const groupParameters: WideString_Optional);
    procedure Invoke_IsExists(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional);
    function Retrieve_InitializationModel: WideString_Optional;
    function Retrieve_InitializationModelList: WideString_Optional;
    function Retrieve_Insert: WideString_Optional;
    function Retrieve_InsertList: WideString_Optional;
    function Retrieve_DeleteList: WideString_Optional;
    function Retrieve_Delete: WideString_Optional;
    function Retrieve_Update: WideString_Optional;
    function Retrieve_UpdateList: WideString_Optional;
    function Retrieve_RetrieveList: UnicodeString;
    function Retrieve_RetrieveListByPaging: WideString_Optional;
    function Retrieve_IsExists: WideString_Optional;
  end;

  TQAdmixtureDataBrief_WS_AsyncProxyEx = class(TROAsyncProxyEx, IQAdmixtureDataBrief_WS_AsyncEx)
  protected
    function __GetInterfaceName: String; override; 
    function BeginInitializationModel(const _MySoapHeader: MySoapHeader; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginInitializationModelList(const _MySoapHeader: MySoapHeader; const length: Integer; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginInsert(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginInsertList(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginDeleteList(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginDelete(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginUpdate(const _MySoapHeader: MySoapHeader; const initJsonString: WideString_Optional; const newJsonString: WideString_Optional; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginUpdateList(const _MySoapHeader: MySoapHeader; const initJsonString: WideString_Optional; const newJsonString: WideString_Optional; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRetrieveList(const _MySoapHeader: MySoapHeader; const where: UnicodeString; const sort: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginRetrieveListByPaging(const _MySoapHeader: MySoapHeader; const where: WideString_Optional; const sort: WideString_Optional; const pageNumber: Integer; const pageSize: Integer; const groupParameters: WideString_Optional; 
                                       const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginIsExists(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function EndInitializationModel(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndInitializationModelList(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndInsert(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndInsertList(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndDeleteList(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndDelete(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndUpdate(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndUpdateList(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndRetrieveList(const aRequest: IROAsyncRequest): UnicodeString;
    function EndRetrieveListByPaging(const aRequest: IROAsyncRequest): WideString_Optional;
    function EndIsExists(const aRequest: IROAsyncRequest): WideString_Optional;
  end;

implementation

uses
  uROSerializer,
  uROClient,
  uROTransportChannel,
  uRORes;

type
  { Forward declarations }
  TMyTransportChannel = class;

  TMyTransportChannel = class(TROTransportChannel)
  end;

class function CoQAdmixtureDataBrief_WS.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IQAdmixtureDataBrief_WS;
begin
  result := TQAdmixtureDataBrief_WS_Proxy.Create(aMessage, aTransportChannel);
  exit;
end;

class function CoQAdmixtureDataBrief_WS.Create(const aUri: TROUri): IQAdmixtureDataBrief_WS;
begin
  result := TQAdmixtureDataBrief_WS_Proxy.Create(aUri);
  exit;
end;

class function CoQAdmixtureDataBrief_WS.Create(const aUrl: String): IQAdmixtureDataBrief_WS;
begin
  result := TQAdmixtureDataBrief_WS_Proxy.Create(aUrl);
  exit;
end;

class function CoQAdmixtureDataBrief_WS_Async.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IQAdmixtureDataBrief_WS_Async;
begin
  result := TQAdmixtureDataBrief_WS_AsyncProxy.Create(aMessage, aTransportChannel);
  exit;
end;

class function CoQAdmixtureDataBrief_WS_Async.Create(const aUri: TROUri): IQAdmixtureDataBrief_WS_Async;
begin
  result := TQAdmixtureDataBrief_WS_AsyncProxy.Create(aUri);
  exit;
end;

class function CoQAdmixtureDataBrief_WS_Async.Create(const aUrl: String): IQAdmixtureDataBrief_WS_Async;
begin
  result := TQAdmixtureDataBrief_WS_AsyncProxy.Create(aUrl);
  exit;
end;

class function CoQAdmixtureDataBrief_WS_AsyncEx.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): IQAdmixtureDataBrief_WS_AsyncEx;
begin
  result := TQAdmixtureDataBrief_WS_AsyncProxyEx.Create(aMessage, aTransportChannel);
  exit;
end;

class function CoQAdmixtureDataBrief_WS_AsyncEx.Create(const aUri: TROUri): IQAdmixtureDataBrief_WS_AsyncEx;
begin
  result := TQAdmixtureDataBrief_WS_AsyncProxyEx.Create(aUri);
  exit;
end;

class function CoQAdmixtureDataBrief_WS_AsyncEx.Create(const aUrl: String): IQAdmixtureDataBrief_WS_AsyncEx;
begin
  result := TQAdmixtureDataBrief_WS_AsyncProxyEx.Create(aUrl);
  exit;
end;

function TQAdmixtureDataBrief_WS_Proxy.__GetInterfaceName: String;
begin
  result := 'QAdmixtureDataBrief_WS';
  exit;
end;

function TQAdmixtureDataBrief_WS_Proxy.InitializationModel(const _MySoapHeader: MySoapHeader): WideString_Optional;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_delete', 'remap_deletelist', 'remap_initializationmodel', 'remap_initializationmodellist', 
                                             'remap_insert', 'remap_insertlist', 'remap_isexists', 'remap_retrievelist', 'remap_retrievelistbypaging', 'remap_update', 'remap_updatelist', 'soapinputmessagenamespace', 
                                             'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/InitializationModel', 'MySoapHeader', 'http://110.52.60.19:6690/Quality/Ingredient/QAdmixtureDataBrief_WS.asmx', 
                                             '*', 'http://tempuri.org/Delete', 'http://tempuri.org/DeleteList', 'http://tempuri.org/InitializationModel', 'http://tempuri.org/InitializationModelList', 'http://tempuri.org/Insert', 
                                             'http://tempuri.org/InsertList', 'http://tempuri.org/IsExists', 'http://tempuri.org/RetrieveList', 'http://tempuri.org/RetrieveListByPaging', 'http://tempuri.org/Update', 
                                             'http://tempuri.org/UpdateList', 'http://tempuri.org/', 'InitializationModel', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'QAdmixtureDataBrief_WS', __InterfaceName, 'InitializationModel');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('InitializationModelResult', System.TypeInfo(WideString_Optional), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TQAdmixtureDataBrief_WS_Proxy.InitializationModelList(const _MySoapHeader: MySoapHeader; const length: Integer): WideString_Optional;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_delete', 'remap_deletelist', 'remap_initializationmodel', 'remap_initializationmodellist', 
                                             'remap_insert', 'remap_insertlist', 'remap_isexists', 'remap_retrievelist', 'remap_retrievelistbypaging', 'remap_update', 'remap_updatelist', 'soapinputmessagenamespace', 
                                             'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/InitializationModelList', 'MySoapHeader', 'http://110.52.60.19:6690/Quality/Ingredient/QAdmixtureDataBrief_WS.asmx', 
                                             '*', 'http://tempuri.org/Delete', 'http://tempuri.org/DeleteList', 'http://tempuri.org/InitializationModel', 'http://tempuri.org/InitializationModelList', 'http://tempuri.org/Insert', 
                                             'http://tempuri.org/InsertList', 'http://tempuri.org/IsExists', 'http://tempuri.org/RetrieveList', 'http://tempuri.org/RetrieveListByPaging', 'http://tempuri.org/Update', 
                                             'http://tempuri.org/UpdateList', 'http://tempuri.org/', 'InitializationModelList', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'QAdmixtureDataBrief_WS', __InterfaceName, 'InitializationModelList');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('length', System.TypeInfo(Integer), length, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('InitializationModelListResult', System.TypeInfo(WideString_Optional), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TQAdmixtureDataBrief_WS_Proxy.Insert(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional): WideString_Optional;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_delete', 'remap_deletelist', 'remap_initializationmodel', 'remap_initializationmodellist', 
                                             'remap_insert', 'remap_insertlist', 'remap_isexists', 'remap_retrievelist', 'remap_retrievelistbypaging', 'remap_update', 'remap_updatelist', 'soapinputmessagenamespace', 
                                             'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/Insert', 'MySoapHeader', 'http://110.52.60.19:6690/Quality/Ingredient/QAdmixtureDataBrief_WS.asmx', 
                                             '*', 'http://tempuri.org/Delete', 'http://tempuri.org/DeleteList', 'http://tempuri.org/InitializationModel', 'http://tempuri.org/InitializationModelList', 'http://tempuri.org/Insert', 
                                             'http://tempuri.org/InsertList', 'http://tempuri.org/IsExists', 'http://tempuri.org/RetrieveList', 'http://tempuri.org/RetrieveListByPaging', 'http://tempuri.org/Update', 
                                             'http://tempuri.org/UpdateList', 'http://tempuri.org/', 'Insert', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'QAdmixtureDataBrief_WS', __InterfaceName, 'Insert');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('jsonString', System.TypeInfo(WideString_Optional), jsonString, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('InsertResult', System.TypeInfo(WideString_Optional), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TQAdmixtureDataBrief_WS_Proxy.InsertList(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional): WideString_Optional;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_delete', 'remap_deletelist', 'remap_initializationmodel', 'remap_initializationmodellist', 
                                             'remap_insert', 'remap_insertlist', 'remap_isexists', 'remap_retrievelist', 'remap_retrievelistbypaging', 'remap_update', 'remap_updatelist', 'soapinputmessagenamespace', 
                                             'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/InsertList', 'MySoapHeader', 'http://110.52.60.19:6690/Quality/Ingredient/QAdmixtureDataBrief_WS.asmx', 
                                             '*', 'http://tempuri.org/Delete', 'http://tempuri.org/DeleteList', 'http://tempuri.org/InitializationModel', 'http://tempuri.org/InitializationModelList', 'http://tempuri.org/Insert', 
                                             'http://tempuri.org/InsertList', 'http://tempuri.org/IsExists', 'http://tempuri.org/RetrieveList', 'http://tempuri.org/RetrieveListByPaging', 'http://tempuri.org/Update', 
                                             'http://tempuri.org/UpdateList', 'http://tempuri.org/', 'InsertList', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'QAdmixtureDataBrief_WS', __InterfaceName, 'InsertList');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('jsonString', System.TypeInfo(WideString_Optional), jsonString, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('InsertListResult', System.TypeInfo(WideString_Optional), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TQAdmixtureDataBrief_WS_Proxy.DeleteList(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional): WideString_Optional;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_delete', 'remap_deletelist', 'remap_initializationmodel', 'remap_initializationmodellist', 
                                             'remap_insert', 'remap_insertlist', 'remap_isexists', 'remap_retrievelist', 'remap_retrievelistbypaging', 'remap_update', 'remap_updatelist', 'soapinputmessagenamespace', 
                                             'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/DeleteList', 'MySoapHeader', 'http://110.52.60.19:6690/Quality/Ingredient/QAdmixtureDataBrief_WS.asmx', 
                                             '*', 'http://tempuri.org/Delete', 'http://tempuri.org/DeleteList', 'http://tempuri.org/InitializationModel', 'http://tempuri.org/InitializationModelList', 'http://tempuri.org/Insert', 
                                             'http://tempuri.org/InsertList', 'http://tempuri.org/IsExists', 'http://tempuri.org/RetrieveList', 'http://tempuri.org/RetrieveListByPaging', 'http://tempuri.org/Update', 
                                             'http://tempuri.org/UpdateList', 'http://tempuri.org/', 'DeleteList', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'QAdmixtureDataBrief_WS', __InterfaceName, 'DeleteList');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('jsonString', System.TypeInfo(WideString_Optional), jsonString, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('DeleteListResult', System.TypeInfo(WideString_Optional), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TQAdmixtureDataBrief_WS_Proxy.Delete(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional): WideString_Optional;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_delete', 'remap_deletelist', 'remap_initializationmodel', 'remap_initializationmodellist', 
                                             'remap_insert', 'remap_insertlist', 'remap_isexists', 'remap_retrievelist', 'remap_retrievelistbypaging', 'remap_update', 'remap_updatelist', 'soapinputmessagenamespace', 
                                             'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/Delete', 'MySoapHeader', 'http://110.52.60.19:6690/Quality/Ingredient/QAdmixtureDataBrief_WS.asmx', 
                                             '*', 'http://tempuri.org/Delete', 'http://tempuri.org/DeleteList', 'http://tempuri.org/InitializationModel', 'http://tempuri.org/InitializationModelList', 'http://tempuri.org/Insert', 
                                             'http://tempuri.org/InsertList', 'http://tempuri.org/IsExists', 'http://tempuri.org/RetrieveList', 'http://tempuri.org/RetrieveListByPaging', 'http://tempuri.org/Update', 
                                             'http://tempuri.org/UpdateList', 'http://tempuri.org/', 'Delete', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'QAdmixtureDataBrief_WS', __InterfaceName, 'Delete');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('jsonString', System.TypeInfo(WideString_Optional), jsonString, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('DeleteResult', System.TypeInfo(WideString_Optional), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TQAdmixtureDataBrief_WS_Proxy.Update(const _MySoapHeader: MySoapHeader; const initJsonString: WideString_Optional; const newJsonString: WideString_Optional): WideString_Optional;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_delete', 'remap_deletelist', 'remap_initializationmodel', 'remap_initializationmodellist', 
                                             'remap_insert', 'remap_insertlist', 'remap_isexists', 'remap_retrievelist', 'remap_retrievelistbypaging', 'remap_update', 'remap_updatelist', 'soapinputmessagenamespace', 
                                             'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/Update', 'MySoapHeader', 'http://110.52.60.19:6690/Quality/Ingredient/QAdmixtureDataBrief_WS.asmx', 
                                             '*', 'http://tempuri.org/Delete', 'http://tempuri.org/DeleteList', 'http://tempuri.org/InitializationModel', 'http://tempuri.org/InitializationModelList', 'http://tempuri.org/Insert', 
                                             'http://tempuri.org/InsertList', 'http://tempuri.org/IsExists', 'http://tempuri.org/RetrieveList', 'http://tempuri.org/RetrieveListByPaging', 'http://tempuri.org/Update', 
                                             'http://tempuri.org/UpdateList', 'http://tempuri.org/', 'Update', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'QAdmixtureDataBrief_WS', __InterfaceName, 'Update');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('initJsonString', System.TypeInfo(WideString_Optional), initJsonString, []);
    lMessage.Write('newJsonString', System.TypeInfo(WideString_Optional), newJsonString, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('UpdateResult', System.TypeInfo(WideString_Optional), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TQAdmixtureDataBrief_WS_Proxy.UpdateList(const _MySoapHeader: MySoapHeader; const initJsonString: WideString_Optional; const newJsonString: WideString_Optional): WideString_Optional;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_delete', 'remap_deletelist', 'remap_initializationmodel', 'remap_initializationmodellist', 
                                             'remap_insert', 'remap_insertlist', 'remap_isexists', 'remap_retrievelist', 'remap_retrievelistbypaging', 'remap_update', 'remap_updatelist', 'soapinputmessagenamespace', 
                                             'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/UpdateList', 'MySoapHeader', 'http://110.52.60.19:6690/Quality/Ingredient/QAdmixtureDataBrief_WS.asmx', 
                                             '*', 'http://tempuri.org/Delete', 'http://tempuri.org/DeleteList', 'http://tempuri.org/InitializationModel', 'http://tempuri.org/InitializationModelList', 'http://tempuri.org/Insert', 
                                             'http://tempuri.org/InsertList', 'http://tempuri.org/IsExists', 'http://tempuri.org/RetrieveList', 'http://tempuri.org/RetrieveListByPaging', 'http://tempuri.org/Update', 
                                             'http://tempuri.org/UpdateList', 'http://tempuri.org/', 'UpdateList', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'QAdmixtureDataBrief_WS', __InterfaceName, 'UpdateList');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('initJsonString', System.TypeInfo(WideString_Optional), initJsonString, []);
    lMessage.Write('newJsonString', System.TypeInfo(WideString_Optional), newJsonString, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('UpdateListResult', System.TypeInfo(WideString_Optional), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TQAdmixtureDataBrief_WS_Proxy.RetrieveList(const _MySoapHeader: MySoapHeader; const where: UnicodeString; const sort: UnicodeString): UnicodeString;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: UnicodeString;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_delete', 'remap_deletelist', 'remap_initializationmodel', 'remap_initializationmodellist', 
                                             'remap_insert', 'remap_insertlist', 'remap_isexists', 'remap_retrievelist', 'remap_retrievelistbypaging', 'remap_update', 'remap_updatelist', 'soapinputmessagenamespace', 
                                             'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/RetrieveList', 'MySoapHeader', 'http://110.52.60.19:6690/Quality/Ingredient/QAdmixtureDataBrief_WS.asmx', 
                                             '*', 'http://tempuri.org/Delete', 'http://tempuri.org/DeleteList', 'http://tempuri.org/InitializationModel', 'http://tempuri.org/InitializationModelList', 'http://tempuri.org/Insert', 
                                             'http://tempuri.org/InsertList', 'http://tempuri.org/IsExists', 'http://tempuri.org/RetrieveList', 'http://tempuri.org/RetrieveListByPaging', 'http://tempuri.org/Update', 
                                             'http://tempuri.org/UpdateList', 'http://tempuri.org/', 'RetrieveList', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'QAdmixtureDataBrief_WS', __InterfaceName, 'RetrieveList');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('where', System.TypeInfo(UnicodeString), where, []);
    lMessage.Write('sort', System.TypeInfo(UnicodeString), sort, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('RetrieveListResult', System.TypeInfo(UnicodeString), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TQAdmixtureDataBrief_WS_Proxy.RetrieveListByPaging(const _MySoapHeader: MySoapHeader; const where: WideString_Optional; const sort: WideString_Optional; const pageNumber: Integer; const pageSize: Integer; 
                                                            const groupParameters: WideString_Optional): WideString_Optional;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_delete', 'remap_deletelist', 'remap_initializationmodel', 'remap_initializationmodellist', 
                                             'remap_insert', 'remap_insertlist', 'remap_isexists', 'remap_retrievelist', 'remap_retrievelistbypaging', 'remap_update', 'remap_updatelist', 'soapinputmessagenamespace', 
                                             'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/RetrieveListByPaging', 'MySoapHeader', 'http://110.52.60.19:6690/Quality/Ingredient/QAdmixtureDataBrief_WS.asmx', 
                                             '*', 'http://tempuri.org/Delete', 'http://tempuri.org/DeleteList', 'http://tempuri.org/InitializationModel', 'http://tempuri.org/InitializationModelList', 'http://tempuri.org/Insert', 
                                             'http://tempuri.org/InsertList', 'http://tempuri.org/IsExists', 'http://tempuri.org/RetrieveList', 'http://tempuri.org/RetrieveListByPaging', 'http://tempuri.org/Update', 
                                             'http://tempuri.org/UpdateList', 'http://tempuri.org/', 'RetrieveListByPaging', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'QAdmixtureDataBrief_WS', __InterfaceName, 'RetrieveListByPaging');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('where', System.TypeInfo(WideString_Optional), where, []);
    lMessage.Write('sort', System.TypeInfo(WideString_Optional), sort, []);
    lMessage.Write('pageNumber', System.TypeInfo(Integer), pageNumber, []);
    lMessage.Write('pageSize', System.TypeInfo(Integer), pageSize, []);
    lMessage.Write('groupParameters', System.TypeInfo(WideString_Optional), groupParameters, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('RetrieveListByPagingResult', System.TypeInfo(WideString_Optional), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TQAdmixtureDataBrief_WS_Proxy.IsExists(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional): WideString_Optional;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_delete', 'remap_deletelist', 'remap_initializationmodel', 'remap_initializationmodellist', 
                                             'remap_insert', 'remap_insertlist', 'remap_isexists', 'remap_retrievelist', 'remap_retrievelistbypaging', 'remap_update', 'remap_updatelist', 'soapinputmessagenamespace', 
                                             'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/IsExists', 'MySoapHeader', 'http://110.52.60.19:6690/Quality/Ingredient/QAdmixtureDataBrief_WS.asmx', 
                                             '*', 'http://tempuri.org/Delete', 'http://tempuri.org/DeleteList', 'http://tempuri.org/InitializationModel', 'http://tempuri.org/InitializationModelList', 'http://tempuri.org/Insert', 
                                             'http://tempuri.org/InsertList', 'http://tempuri.org/IsExists', 'http://tempuri.org/RetrieveList', 'http://tempuri.org/RetrieveListByPaging', 'http://tempuri.org/Update', 
                                             'http://tempuri.org/UpdateList', 'http://tempuri.org/', 'IsExists', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'QAdmixtureDataBrief_WS', __InterfaceName, 'IsExists');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('jsonString', System.TypeInfo(WideString_Optional), jsonString, []);
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('IsExistsResult', System.TypeInfo(WideString_Optional), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TQAdmixtureDataBrief_WS_AsyncProxy.__GetInterfaceName: String;
begin
  result := 'QAdmixtureDataBrief_WS';
  exit;
end;

procedure TQAdmixtureDataBrief_WS_AsyncProxy.Invoke_InitializationModel(const _MySoapHeader: MySoapHeader);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('InitializationModel');

    lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_delete', 'remap_deletelist', 'remap_initializationmodel', 'remap_initializationmodellist', 
                                               'remap_insert', 'remap_insertlist', 'remap_isexists', 'remap_retrievelist', 'remap_retrievelistbypaging', 'remap_update', 'remap_updatelist', 'soapinputmessagenamespace', 
                                               'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/InitializationModel', 'MySoapHeader', 'http://110.52.60.19:6690/Quality/Ingredient/QAdmixtureDataBrief_WS.asmx', 
                                               '*', 'http://tempuri.org/Delete', 'http://tempuri.org/DeleteList', 'http://tempuri.org/InitializationModel', 'http://tempuri.org/InitializationModelList', 
                                               'http://tempuri.org/Insert', 'http://tempuri.org/InsertList', 'http://tempuri.org/IsExists', 'http://tempuri.org/RetrieveList', 'http://tempuri.org/RetrieveListByPaging', 
                                               'http://tempuri.org/Update', 'http://tempuri.org/UpdateList', 'http://tempuri.org/', 'InitializationModel', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'QAdmixtureDataBrief_WS', __InterfaceName, 'InitializationModel');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    __DispatchAsyncRequest('InitializationModel', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TQAdmixtureDataBrief_WS_AsyncProxy.Invoke_InitializationModelList(const _MySoapHeader: MySoapHeader; const length: Integer);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('InitializationModelList');

    lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_delete', 'remap_deletelist', 'remap_initializationmodel', 'remap_initializationmodellist', 
                                               'remap_insert', 'remap_insertlist', 'remap_isexists', 'remap_retrievelist', 'remap_retrievelistbypaging', 'remap_update', 'remap_updatelist', 'soapinputmessagenamespace', 
                                               'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/InitializationModelList', 'MySoapHeader', 'http://110.52.60.19:6690/Quality/Ingredient/QAdmixtureDataBrief_WS.asmx', 
                                               '*', 'http://tempuri.org/Delete', 'http://tempuri.org/DeleteList', 'http://tempuri.org/InitializationModel', 'http://tempuri.org/InitializationModelList', 
                                               'http://tempuri.org/Insert', 'http://tempuri.org/InsertList', 'http://tempuri.org/IsExists', 'http://tempuri.org/RetrieveList', 'http://tempuri.org/RetrieveListByPaging', 
                                               'http://tempuri.org/Update', 'http://tempuri.org/UpdateList', 'http://tempuri.org/', 'InitializationModelList', 'http://tempuri.org/', 'document', 'SOAP', 
                                               'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'QAdmixtureDataBrief_WS', __InterfaceName, 'InitializationModelList');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('length', System.TypeInfo(Integer), length, []);
    __DispatchAsyncRequest('InitializationModelList', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TQAdmixtureDataBrief_WS_AsyncProxy.Invoke_Insert(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('Insert');

    lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_delete', 'remap_deletelist', 'remap_initializationmodel', 'remap_initializationmodellist', 
                                               'remap_insert', 'remap_insertlist', 'remap_isexists', 'remap_retrievelist', 'remap_retrievelistbypaging', 'remap_update', 'remap_updatelist', 'soapinputmessagenamespace', 
                                               'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/Insert', 'MySoapHeader', 'http://110.52.60.19:6690/Quality/Ingredient/QAdmixtureDataBrief_WS.asmx', 
                                               '*', 'http://tempuri.org/Delete', 'http://tempuri.org/DeleteList', 'http://tempuri.org/InitializationModel', 'http://tempuri.org/InitializationModelList', 
                                               'http://tempuri.org/Insert', 'http://tempuri.org/InsertList', 'http://tempuri.org/IsExists', 'http://tempuri.org/RetrieveList', 'http://tempuri.org/RetrieveListByPaging', 
                                               'http://tempuri.org/Update', 'http://tempuri.org/UpdateList', 'http://tempuri.org/', 'Insert', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'QAdmixtureDataBrief_WS', __InterfaceName, 'Insert');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('jsonString', System.TypeInfo(WideString_Optional), jsonString, []);
    __DispatchAsyncRequest('Insert', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TQAdmixtureDataBrief_WS_AsyncProxy.Invoke_InsertList(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('InsertList');

    lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_delete', 'remap_deletelist', 'remap_initializationmodel', 'remap_initializationmodellist', 
                                               'remap_insert', 'remap_insertlist', 'remap_isexists', 'remap_retrievelist', 'remap_retrievelistbypaging', 'remap_update', 'remap_updatelist', 'soapinputmessagenamespace', 
                                               'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/InsertList', 'MySoapHeader', 'http://110.52.60.19:6690/Quality/Ingredient/QAdmixtureDataBrief_WS.asmx', 
                                               '*', 'http://tempuri.org/Delete', 'http://tempuri.org/DeleteList', 'http://tempuri.org/InitializationModel', 'http://tempuri.org/InitializationModelList', 
                                               'http://tempuri.org/Insert', 'http://tempuri.org/InsertList', 'http://tempuri.org/IsExists', 'http://tempuri.org/RetrieveList', 'http://tempuri.org/RetrieveListByPaging', 
                                               'http://tempuri.org/Update', 'http://tempuri.org/UpdateList', 'http://tempuri.org/', 'InsertList', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'QAdmixtureDataBrief_WS', __InterfaceName, 'InsertList');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('jsonString', System.TypeInfo(WideString_Optional), jsonString, []);
    __DispatchAsyncRequest('InsertList', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TQAdmixtureDataBrief_WS_AsyncProxy.Invoke_DeleteList(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('DeleteList');

    lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_delete', 'remap_deletelist', 'remap_initializationmodel', 'remap_initializationmodellist', 
                                               'remap_insert', 'remap_insertlist', 'remap_isexists', 'remap_retrievelist', 'remap_retrievelistbypaging', 'remap_update', 'remap_updatelist', 'soapinputmessagenamespace', 
                                               'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/DeleteList', 'MySoapHeader', 'http://110.52.60.19:6690/Quality/Ingredient/QAdmixtureDataBrief_WS.asmx', 
                                               '*', 'http://tempuri.org/Delete', 'http://tempuri.org/DeleteList', 'http://tempuri.org/InitializationModel', 'http://tempuri.org/InitializationModelList', 
                                               'http://tempuri.org/Insert', 'http://tempuri.org/InsertList', 'http://tempuri.org/IsExists', 'http://tempuri.org/RetrieveList', 'http://tempuri.org/RetrieveListByPaging', 
                                               'http://tempuri.org/Update', 'http://tempuri.org/UpdateList', 'http://tempuri.org/', 'DeleteList', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'QAdmixtureDataBrief_WS', __InterfaceName, 'DeleteList');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('jsonString', System.TypeInfo(WideString_Optional), jsonString, []);
    __DispatchAsyncRequest('DeleteList', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TQAdmixtureDataBrief_WS_AsyncProxy.Invoke_Delete(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('Delete');

    lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_delete', 'remap_deletelist', 'remap_initializationmodel', 'remap_initializationmodellist', 
                                               'remap_insert', 'remap_insertlist', 'remap_isexists', 'remap_retrievelist', 'remap_retrievelistbypaging', 'remap_update', 'remap_updatelist', 'soapinputmessagenamespace', 
                                               'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/Delete', 'MySoapHeader', 'http://110.52.60.19:6690/Quality/Ingredient/QAdmixtureDataBrief_WS.asmx', 
                                               '*', 'http://tempuri.org/Delete', 'http://tempuri.org/DeleteList', 'http://tempuri.org/InitializationModel', 'http://tempuri.org/InitializationModelList', 
                                               'http://tempuri.org/Insert', 'http://tempuri.org/InsertList', 'http://tempuri.org/IsExists', 'http://tempuri.org/RetrieveList', 'http://tempuri.org/RetrieveListByPaging', 
                                               'http://tempuri.org/Update', 'http://tempuri.org/UpdateList', 'http://tempuri.org/', 'Delete', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'QAdmixtureDataBrief_WS', __InterfaceName, 'Delete');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('jsonString', System.TypeInfo(WideString_Optional), jsonString, []);
    __DispatchAsyncRequest('Delete', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TQAdmixtureDataBrief_WS_AsyncProxy.Invoke_Update(const _MySoapHeader: MySoapHeader; const initJsonString: WideString_Optional; const newJsonString: WideString_Optional);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('Update');

    lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_delete', 'remap_deletelist', 'remap_initializationmodel', 'remap_initializationmodellist', 
                                               'remap_insert', 'remap_insertlist', 'remap_isexists', 'remap_retrievelist', 'remap_retrievelistbypaging', 'remap_update', 'remap_updatelist', 'soapinputmessagenamespace', 
                                               'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/Update', 'MySoapHeader', 'http://110.52.60.19:6690/Quality/Ingredient/QAdmixtureDataBrief_WS.asmx', 
                                               '*', 'http://tempuri.org/Delete', 'http://tempuri.org/DeleteList', 'http://tempuri.org/InitializationModel', 'http://tempuri.org/InitializationModelList', 
                                               'http://tempuri.org/Insert', 'http://tempuri.org/InsertList', 'http://tempuri.org/IsExists', 'http://tempuri.org/RetrieveList', 'http://tempuri.org/RetrieveListByPaging', 
                                               'http://tempuri.org/Update', 'http://tempuri.org/UpdateList', 'http://tempuri.org/', 'Update', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'QAdmixtureDataBrief_WS', __InterfaceName, 'Update');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('initJsonString', System.TypeInfo(WideString_Optional), initJsonString, []);
    lMessage.Write('newJsonString', System.TypeInfo(WideString_Optional), newJsonString, []);
    __DispatchAsyncRequest('Update', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TQAdmixtureDataBrief_WS_AsyncProxy.Invoke_UpdateList(const _MySoapHeader: MySoapHeader; const initJsonString: WideString_Optional; const newJsonString: WideString_Optional);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('UpdateList');

    lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_delete', 'remap_deletelist', 'remap_initializationmodel', 'remap_initializationmodellist', 
                                               'remap_insert', 'remap_insertlist', 'remap_isexists', 'remap_retrievelist', 'remap_retrievelistbypaging', 'remap_update', 'remap_updatelist', 'soapinputmessagenamespace', 
                                               'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/UpdateList', 'MySoapHeader', 'http://110.52.60.19:6690/Quality/Ingredient/QAdmixtureDataBrief_WS.asmx', 
                                               '*', 'http://tempuri.org/Delete', 'http://tempuri.org/DeleteList', 'http://tempuri.org/InitializationModel', 'http://tempuri.org/InitializationModelList', 
                                               'http://tempuri.org/Insert', 'http://tempuri.org/InsertList', 'http://tempuri.org/IsExists', 'http://tempuri.org/RetrieveList', 'http://tempuri.org/RetrieveListByPaging', 
                                               'http://tempuri.org/Update', 'http://tempuri.org/UpdateList', 'http://tempuri.org/', 'UpdateList', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'QAdmixtureDataBrief_WS', __InterfaceName, 'UpdateList');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('initJsonString', System.TypeInfo(WideString_Optional), initJsonString, []);
    lMessage.Write('newJsonString', System.TypeInfo(WideString_Optional), newJsonString, []);
    __DispatchAsyncRequest('UpdateList', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TQAdmixtureDataBrief_WS_AsyncProxy.Invoke_RetrieveList(const _MySoapHeader: MySoapHeader; const where: UnicodeString; const sort: UnicodeString);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('RetrieveList');

    lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_delete', 'remap_deletelist', 'remap_initializationmodel', 'remap_initializationmodellist', 
                                               'remap_insert', 'remap_insertlist', 'remap_isexists', 'remap_retrievelist', 'remap_retrievelistbypaging', 'remap_update', 'remap_updatelist', 'soapinputmessagenamespace', 
                                               'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/RetrieveList', 'MySoapHeader', 'http://110.52.60.19:6690/Quality/Ingredient/QAdmixtureDataBrief_WS.asmx', 
                                               '*', 'http://tempuri.org/Delete', 'http://tempuri.org/DeleteList', 'http://tempuri.org/InitializationModel', 'http://tempuri.org/InitializationModelList', 
                                               'http://tempuri.org/Insert', 'http://tempuri.org/InsertList', 'http://tempuri.org/IsExists', 'http://tempuri.org/RetrieveList', 'http://tempuri.org/RetrieveListByPaging', 
                                               'http://tempuri.org/Update', 'http://tempuri.org/UpdateList', 'http://tempuri.org/', 'RetrieveList', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'QAdmixtureDataBrief_WS', __InterfaceName, 'RetrieveList');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('where', System.TypeInfo(UnicodeString), where, []);
    lMessage.Write('sort', System.TypeInfo(UnicodeString), sort, []);
    __DispatchAsyncRequest('RetrieveList', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TQAdmixtureDataBrief_WS_AsyncProxy.Invoke_RetrieveListByPaging(const _MySoapHeader: MySoapHeader; const where: WideString_Optional; const sort: WideString_Optional; const pageNumber: Integer; 
                                                                         const pageSize: Integer; const groupParameters: WideString_Optional);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('RetrieveListByPaging');

    lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_delete', 'remap_deletelist', 'remap_initializationmodel', 'remap_initializationmodellist', 
                                               'remap_insert', 'remap_insertlist', 'remap_isexists', 'remap_retrievelist', 'remap_retrievelistbypaging', 'remap_update', 'remap_updatelist', 'soapinputmessagenamespace', 
                                               'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/RetrieveListByPaging', 'MySoapHeader', 'http://110.52.60.19:6690/Quality/Ingredient/QAdmixtureDataBrief_WS.asmx', 
                                               '*', 'http://tempuri.org/Delete', 'http://tempuri.org/DeleteList', 'http://tempuri.org/InitializationModel', 'http://tempuri.org/InitializationModelList', 
                                               'http://tempuri.org/Insert', 'http://tempuri.org/InsertList', 'http://tempuri.org/IsExists', 'http://tempuri.org/RetrieveList', 'http://tempuri.org/RetrieveListByPaging', 
                                               'http://tempuri.org/Update', 'http://tempuri.org/UpdateList', 'http://tempuri.org/', 'RetrieveListByPaging', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'QAdmixtureDataBrief_WS', __InterfaceName, 'RetrieveListByPaging');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('where', System.TypeInfo(WideString_Optional), where, []);
    lMessage.Write('sort', System.TypeInfo(WideString_Optional), sort, []);
    lMessage.Write('pageNumber', System.TypeInfo(Integer), pageNumber, []);
    lMessage.Write('pageSize', System.TypeInfo(Integer), pageSize, []);
    lMessage.Write('groupParameters', System.TypeInfo(WideString_Optional), groupParameters, []);
    __DispatchAsyncRequest('RetrieveListByPaging', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TQAdmixtureDataBrief_WS_AsyncProxy.Invoke_IsExists(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional);
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('IsExists');

    lMessage.SetAttributes(lTransportChannel, ['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_delete', 'remap_deletelist', 'remap_initializationmodel', 'remap_initializationmodellist', 
                                               'remap_insert', 'remap_insertlist', 'remap_isexists', 'remap_retrievelist', 'remap_retrievelistbypaging', 'remap_update', 'remap_updatelist', 'soapinputmessagenamespace', 
                                               'soapinputnameoverride', 'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/IsExists', 'MySoapHeader', 'http://110.52.60.19:6690/Quality/Ingredient/QAdmixtureDataBrief_WS.asmx', 
                                               '*', 'http://tempuri.org/Delete', 'http://tempuri.org/DeleteList', 'http://tempuri.org/InitializationModel', 'http://tempuri.org/InitializationModelList', 
                                               'http://tempuri.org/Insert', 'http://tempuri.org/InsertList', 'http://tempuri.org/IsExists', 'http://tempuri.org/RetrieveList', 'http://tempuri.org/RetrieveListByPaging', 
                                               'http://tempuri.org/Update', 'http://tempuri.org/UpdateList', 'http://tempuri.org/', 'IsExists', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.InitializeRequestMessage(lTransportChannel, 'QAdmixtureDataBrief_WS', __InterfaceName, 'IsExists');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('jsonString', System.TypeInfo(WideString_Optional), jsonString, []);
    __DispatchAsyncRequest('IsExists', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TQAdmixtureDataBrief_WS_AsyncProxy.Retrieve_InitializationModel: WideString_Optional;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('InitializationModel');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('InitializationModelResult', System.TypeInfo(WideString_Optional), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TQAdmixtureDataBrief_WS_AsyncProxy.Retrieve_InitializationModelList: WideString_Optional;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('InitializationModelList');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('InitializationModelListResult', System.TypeInfo(WideString_Optional), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TQAdmixtureDataBrief_WS_AsyncProxy.Retrieve_Insert: WideString_Optional;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('Insert');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('InsertResult', System.TypeInfo(WideString_Optional), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TQAdmixtureDataBrief_WS_AsyncProxy.Retrieve_InsertList: WideString_Optional;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('InsertList');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('InsertListResult', System.TypeInfo(WideString_Optional), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TQAdmixtureDataBrief_WS_AsyncProxy.Retrieve_DeleteList: WideString_Optional;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('DeleteList');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('DeleteListResult', System.TypeInfo(WideString_Optional), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TQAdmixtureDataBrief_WS_AsyncProxy.Retrieve_Delete: WideString_Optional;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('Delete');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('DeleteResult', System.TypeInfo(WideString_Optional), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TQAdmixtureDataBrief_WS_AsyncProxy.Retrieve_Update: WideString_Optional;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('Update');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('UpdateResult', System.TypeInfo(WideString_Optional), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TQAdmixtureDataBrief_WS_AsyncProxy.Retrieve_UpdateList: WideString_Optional;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('UpdateList');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('UpdateListResult', System.TypeInfo(WideString_Optional), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TQAdmixtureDataBrief_WS_AsyncProxy.Retrieve_RetrieveList: UnicodeString;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: UnicodeString;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('RetrieveList');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('RetrieveListResult', System.TypeInfo(UnicodeString), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TQAdmixtureDataBrief_WS_AsyncProxy.Retrieve_RetrieveListByPaging: WideString_Optional;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('RetrieveListByPaging');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('RetrieveListByPagingResult', System.TypeInfo(WideString_Optional), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TQAdmixtureDataBrief_WS_AsyncProxy.Retrieve_IsExists: WideString_Optional;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: WideString_Optional;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('IsExists');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('IsExistsResult', System.TypeInfo(WideString_Optional), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free;
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TQAdmixtureDataBrief_WS_AsyncProxyEx.__GetInterfaceName: String;
begin
  result := 'QAdmixtureDataBrief_WS';
  exit;
end;

function TQAdmixtureDataBrief_WS_AsyncProxyEx.BeginInitializationModel(const _MySoapHeader: MySoapHeader; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_delete', 'remap_deletelist', 'remap_initializationmodel', 'remap_initializationmodellist', 'remap_insert', 
                               'remap_insertlist', 'remap_isexists', 'remap_retrievelist', 'remap_retrievelistbypaging', 'remap_update', 'remap_updatelist', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                               'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/InitializationModel', 'MySoapHeader', 'http://110.52.60.19:6690/Quality/Ingredient/QAdmixtureDataBrief_WS.asmx', 
                               '*', 'http://tempuri.org/Delete', 'http://tempuri.org/DeleteList', 'http://tempuri.org/InitializationModel', 'http://tempuri.org/InitializationModelList', 'http://tempuri.org/Insert', 
                               'http://tempuri.org/InsertList', 'http://tempuri.org/IsExists', 'http://tempuri.org/RetrieveList', 'http://tempuri.org/RetrieveListByPaging', 'http://tempuri.org/Update', 
                               'http://tempuri.org/UpdateList', 'http://tempuri.org/', 'InitializationModel', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'QAdmixtureDataBrief_WS', __InterfaceName, 'InitializationModel');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TQAdmixtureDataBrief_WS_AsyncProxyEx.BeginInitializationModelList(const _MySoapHeader: MySoapHeader; const length: Integer; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_delete', 'remap_deletelist', 'remap_initializationmodel', 'remap_initializationmodellist', 'remap_insert', 
                               'remap_insertlist', 'remap_isexists', 'remap_retrievelist', 'remap_retrievelistbypaging', 'remap_update', 'remap_updatelist', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                               'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/InitializationModelList', 'MySoapHeader', 'http://110.52.60.19:6690/Quality/Ingredient/QAdmixtureDataBrief_WS.asmx', 
                               '*', 'http://tempuri.org/Delete', 'http://tempuri.org/DeleteList', 'http://tempuri.org/InitializationModel', 'http://tempuri.org/InitializationModelList', 'http://tempuri.org/Insert', 
                               'http://tempuri.org/InsertList', 'http://tempuri.org/IsExists', 'http://tempuri.org/RetrieveList', 'http://tempuri.org/RetrieveListByPaging', 'http://tempuri.org/Update', 
                               'http://tempuri.org/UpdateList', 'http://tempuri.org/', 'InitializationModelList', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'QAdmixtureDataBrief_WS', __InterfaceName, 'InitializationModelList');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('length', System.TypeInfo(Integer), length, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TQAdmixtureDataBrief_WS_AsyncProxyEx.BeginInsert(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_delete', 'remap_deletelist', 'remap_initializationmodel', 'remap_initializationmodellist', 'remap_insert', 
                               'remap_insertlist', 'remap_isexists', 'remap_retrievelist', 'remap_retrievelistbypaging', 'remap_update', 'remap_updatelist', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                               'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/Insert', 'MySoapHeader', 'http://110.52.60.19:6690/Quality/Ingredient/QAdmixtureDataBrief_WS.asmx', 
                               '*', 'http://tempuri.org/Delete', 'http://tempuri.org/DeleteList', 'http://tempuri.org/InitializationModel', 'http://tempuri.org/InitializationModelList', 'http://tempuri.org/Insert', 
                               'http://tempuri.org/InsertList', 'http://tempuri.org/IsExists', 'http://tempuri.org/RetrieveList', 'http://tempuri.org/RetrieveListByPaging', 'http://tempuri.org/Update', 
                               'http://tempuri.org/UpdateList', 'http://tempuri.org/', 'Insert', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'QAdmixtureDataBrief_WS', __InterfaceName, 'Insert');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('jsonString', System.TypeInfo(WideString_Optional), jsonString, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TQAdmixtureDataBrief_WS_AsyncProxyEx.BeginInsertList(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_delete', 'remap_deletelist', 'remap_initializationmodel', 'remap_initializationmodellist', 'remap_insert', 
                               'remap_insertlist', 'remap_isexists', 'remap_retrievelist', 'remap_retrievelistbypaging', 'remap_update', 'remap_updatelist', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                               'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/InsertList', 'MySoapHeader', 'http://110.52.60.19:6690/Quality/Ingredient/QAdmixtureDataBrief_WS.asmx', 
                               '*', 'http://tempuri.org/Delete', 'http://tempuri.org/DeleteList', 'http://tempuri.org/InitializationModel', 'http://tempuri.org/InitializationModelList', 'http://tempuri.org/Insert', 
                               'http://tempuri.org/InsertList', 'http://tempuri.org/IsExists', 'http://tempuri.org/RetrieveList', 'http://tempuri.org/RetrieveListByPaging', 'http://tempuri.org/Update', 
                               'http://tempuri.org/UpdateList', 'http://tempuri.org/', 'InsertList', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'QAdmixtureDataBrief_WS', __InterfaceName, 'InsertList');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('jsonString', System.TypeInfo(WideString_Optional), jsonString, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TQAdmixtureDataBrief_WS_AsyncProxyEx.BeginDeleteList(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_delete', 'remap_deletelist', 'remap_initializationmodel', 'remap_initializationmodellist', 'remap_insert', 
                               'remap_insertlist', 'remap_isexists', 'remap_retrievelist', 'remap_retrievelistbypaging', 'remap_update', 'remap_updatelist', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                               'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/DeleteList', 'MySoapHeader', 'http://110.52.60.19:6690/Quality/Ingredient/QAdmixtureDataBrief_WS.asmx', 
                               '*', 'http://tempuri.org/Delete', 'http://tempuri.org/DeleteList', 'http://tempuri.org/InitializationModel', 'http://tempuri.org/InitializationModelList', 'http://tempuri.org/Insert', 
                               'http://tempuri.org/InsertList', 'http://tempuri.org/IsExists', 'http://tempuri.org/RetrieveList', 'http://tempuri.org/RetrieveListByPaging', 'http://tempuri.org/Update', 
                               'http://tempuri.org/UpdateList', 'http://tempuri.org/', 'DeleteList', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'QAdmixtureDataBrief_WS', __InterfaceName, 'DeleteList');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('jsonString', System.TypeInfo(WideString_Optional), jsonString, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TQAdmixtureDataBrief_WS_AsyncProxyEx.BeginDelete(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_delete', 'remap_deletelist', 'remap_initializationmodel', 'remap_initializationmodellist', 'remap_insert', 
                               'remap_insertlist', 'remap_isexists', 'remap_retrievelist', 'remap_retrievelistbypaging', 'remap_update', 'remap_updatelist', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                               'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/Delete', 'MySoapHeader', 'http://110.52.60.19:6690/Quality/Ingredient/QAdmixtureDataBrief_WS.asmx', 
                               '*', 'http://tempuri.org/Delete', 'http://tempuri.org/DeleteList', 'http://tempuri.org/InitializationModel', 'http://tempuri.org/InitializationModelList', 'http://tempuri.org/Insert', 
                               'http://tempuri.org/InsertList', 'http://tempuri.org/IsExists', 'http://tempuri.org/RetrieveList', 'http://tempuri.org/RetrieveListByPaging', 'http://tempuri.org/Update', 
                               'http://tempuri.org/UpdateList', 'http://tempuri.org/', 'Delete', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'QAdmixtureDataBrief_WS', __InterfaceName, 'Delete');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('jsonString', System.TypeInfo(WideString_Optional), jsonString, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TQAdmixtureDataBrief_WS_AsyncProxyEx.BeginUpdate(const _MySoapHeader: MySoapHeader; const initJsonString: WideString_Optional; const newJsonString: WideString_Optional; const aCallback: TROAsyncCallback; 
                                                          const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_delete', 'remap_deletelist', 'remap_initializationmodel', 'remap_initializationmodellist', 'remap_insert', 
                               'remap_insertlist', 'remap_isexists', 'remap_retrievelist', 'remap_retrievelistbypaging', 'remap_update', 'remap_updatelist', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                               'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/Update', 'MySoapHeader', 'http://110.52.60.19:6690/Quality/Ingredient/QAdmixtureDataBrief_WS.asmx', 
                               '*', 'http://tempuri.org/Delete', 'http://tempuri.org/DeleteList', 'http://tempuri.org/InitializationModel', 'http://tempuri.org/InitializationModelList', 'http://tempuri.org/Insert', 
                               'http://tempuri.org/InsertList', 'http://tempuri.org/IsExists', 'http://tempuri.org/RetrieveList', 'http://tempuri.org/RetrieveListByPaging', 'http://tempuri.org/Update', 
                               'http://tempuri.org/UpdateList', 'http://tempuri.org/', 'Update', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'QAdmixtureDataBrief_WS', __InterfaceName, 'Update');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('initJsonString', System.TypeInfo(WideString_Optional), initJsonString, []);
    lMessage.Write('newJsonString', System.TypeInfo(WideString_Optional), newJsonString, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TQAdmixtureDataBrief_WS_AsyncProxyEx.BeginUpdateList(const _MySoapHeader: MySoapHeader; const initJsonString: WideString_Optional; const newJsonString: WideString_Optional; const aCallback: TROAsyncCallback; 
                                                              const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_delete', 'remap_deletelist', 'remap_initializationmodel', 'remap_initializationmodellist', 'remap_insert', 
                               'remap_insertlist', 'remap_isexists', 'remap_retrievelist', 'remap_retrievelistbypaging', 'remap_update', 'remap_updatelist', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                               'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/UpdateList', 'MySoapHeader', 'http://110.52.60.19:6690/Quality/Ingredient/QAdmixtureDataBrief_WS.asmx', 
                               '*', 'http://tempuri.org/Delete', 'http://tempuri.org/DeleteList', 'http://tempuri.org/InitializationModel', 'http://tempuri.org/InitializationModelList', 'http://tempuri.org/Insert', 
                               'http://tempuri.org/InsertList', 'http://tempuri.org/IsExists', 'http://tempuri.org/RetrieveList', 'http://tempuri.org/RetrieveListByPaging', 'http://tempuri.org/Update', 
                               'http://tempuri.org/UpdateList', 'http://tempuri.org/', 'UpdateList', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'QAdmixtureDataBrief_WS', __InterfaceName, 'UpdateList');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('initJsonString', System.TypeInfo(WideString_Optional), initJsonString, []);
    lMessage.Write('newJsonString', System.TypeInfo(WideString_Optional), newJsonString, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TQAdmixtureDataBrief_WS_AsyncProxyEx.BeginRetrieveList(const _MySoapHeader: MySoapHeader; const where: UnicodeString; const sort: UnicodeString; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_delete', 'remap_deletelist', 'remap_initializationmodel', 'remap_initializationmodellist', 'remap_insert', 
                               'remap_insertlist', 'remap_isexists', 'remap_retrievelist', 'remap_retrievelistbypaging', 'remap_update', 'remap_updatelist', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                               'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/RetrieveList', 'MySoapHeader', 'http://110.52.60.19:6690/Quality/Ingredient/QAdmixtureDataBrief_WS.asmx', 
                               '*', 'http://tempuri.org/Delete', 'http://tempuri.org/DeleteList', 'http://tempuri.org/InitializationModel', 'http://tempuri.org/InitializationModelList', 'http://tempuri.org/Insert', 
                               'http://tempuri.org/InsertList', 'http://tempuri.org/IsExists', 'http://tempuri.org/RetrieveList', 'http://tempuri.org/RetrieveListByPaging', 'http://tempuri.org/Update', 
                               'http://tempuri.org/UpdateList', 'http://tempuri.org/', 'RetrieveList', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'QAdmixtureDataBrief_WS', __InterfaceName, 'RetrieveList');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('where', System.TypeInfo(UnicodeString), where, []);
    lMessage.Write('sort', System.TypeInfo(UnicodeString), sort, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TQAdmixtureDataBrief_WS_AsyncProxyEx.BeginRetrieveListByPaging(const _MySoapHeader: MySoapHeader; const where: WideString_Optional; const sort: WideString_Optional; const pageNumber: Integer; 
                                                                        const pageSize: Integer; const groupParameters: WideString_Optional; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_delete', 'remap_deletelist', 'remap_initializationmodel', 'remap_initializationmodellist', 'remap_insert', 
                               'remap_insertlist', 'remap_isexists', 'remap_retrievelist', 'remap_retrievelistbypaging', 'remap_update', 'remap_updatelist', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                               'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/RetrieveListByPaging', 'MySoapHeader', 'http://110.52.60.19:6690/Quality/Ingredient/QAdmixtureDataBrief_WS.asmx', 
                               '*', 'http://tempuri.org/Delete', 'http://tempuri.org/DeleteList', 'http://tempuri.org/InitializationModel', 'http://tempuri.org/InitializationModelList', 'http://tempuri.org/Insert', 
                               'http://tempuri.org/InsertList', 'http://tempuri.org/IsExists', 'http://tempuri.org/RetrieveList', 'http://tempuri.org/RetrieveListByPaging', 'http://tempuri.org/Update', 
                               'http://tempuri.org/UpdateList', 'http://tempuri.org/', 'RetrieveListByPaging', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'QAdmixtureDataBrief_WS', __InterfaceName, 'RetrieveListByPaging');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('where', System.TypeInfo(WideString_Optional), where, []);
    lMessage.Write('sort', System.TypeInfo(WideString_Optional), sort, []);
    lMessage.Write('pageNumber', System.TypeInfo(Integer), pageNumber, []);
    lMessage.Write('pageSize', System.TypeInfo(Integer), pageSize, []);
    lMessage.Write('groupParameters', System.TypeInfo(WideString_Optional), groupParameters, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TQAdmixtureDataBrief_WS_AsyncProxyEx.BeginIsExists(const _MySoapHeader: MySoapHeader; const jsonString: WideString_Optional; const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lTransportChannel := __TransportChannel;
  try
    lMessage.StoreAttributes2(['action', 'headerparams', 'location', 'outputchildrennamespace', 'remap_delete', 'remap_deletelist', 'remap_initializationmodel', 'remap_initializationmodellist', 'remap_insert', 
                               'remap_insertlist', 'remap_isexists', 'remap_retrievelist', 'remap_retrievelistbypaging', 'remap_update', 'remap_updatelist', 'soapinputmessagenamespace', 'soapinputnameoverride', 
                               'soapoutputmessagenamespace', 'style', 'type', 'use'], ['http://tempuri.org/IsExists', 'MySoapHeader', 'http://110.52.60.19:6690/Quality/Ingredient/QAdmixtureDataBrief_WS.asmx', 
                               '*', 'http://tempuri.org/Delete', 'http://tempuri.org/DeleteList', 'http://tempuri.org/InitializationModel', 'http://tempuri.org/InitializationModelList', 'http://tempuri.org/Insert', 
                               'http://tempuri.org/InsertList', 'http://tempuri.org/IsExists', 'http://tempuri.org/RetrieveList', 'http://tempuri.org/RetrieveListByPaging', 'http://tempuri.org/Update', 
                               'http://tempuri.org/UpdateList', 'http://tempuri.org/', 'IsExists', 'http://tempuri.org/', 'document', 'SOAP', 'literal']);
    lMessage.ApplyAttributes2();
    lMessage.InitializeRequestMessage(lTransportChannel, 'QAdmixtureDataBrief_WS', __InterfaceName, 'IsExists');
    lMessage.Write('_MySoapHeader', System.TypeInfo(MySoapHeader), _MySoapHeader, []);
    lMessage.Write('jsonString', System.TypeInfo(WideString_Optional), jsonString, []);
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TQAdmixtureDataBrief_WS_AsyncProxyEx.EndInitializationModel(const aRequest: IROAsyncRequest): WideString_Optional;
var
  lResult: WideString_Optional;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('InitializationModelResult', System.TypeInfo(WideString_Optional), lResult, []);
  result := lResult;
  exit;
end;

function TQAdmixtureDataBrief_WS_AsyncProxyEx.EndInitializationModelList(const aRequest: IROAsyncRequest): WideString_Optional;
var
  lResult: WideString_Optional;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('InitializationModelListResult', System.TypeInfo(WideString_Optional), lResult, []);
  result := lResult;
  exit;
end;

function TQAdmixtureDataBrief_WS_AsyncProxyEx.EndInsert(const aRequest: IROAsyncRequest): WideString_Optional;
var
  lResult: WideString_Optional;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('InsertResult', System.TypeInfo(WideString_Optional), lResult, []);
  result := lResult;
  exit;
end;

function TQAdmixtureDataBrief_WS_AsyncProxyEx.EndInsertList(const aRequest: IROAsyncRequest): WideString_Optional;
var
  lResult: WideString_Optional;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('InsertListResult', System.TypeInfo(WideString_Optional), lResult, []);
  result := lResult;
  exit;
end;

function TQAdmixtureDataBrief_WS_AsyncProxyEx.EndDeleteList(const aRequest: IROAsyncRequest): WideString_Optional;
var
  lResult: WideString_Optional;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('DeleteListResult', System.TypeInfo(WideString_Optional), lResult, []);
  result := lResult;
  exit;
end;

function TQAdmixtureDataBrief_WS_AsyncProxyEx.EndDelete(const aRequest: IROAsyncRequest): WideString_Optional;
var
  lResult: WideString_Optional;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('DeleteResult', System.TypeInfo(WideString_Optional), lResult, []);
  result := lResult;
  exit;
end;

function TQAdmixtureDataBrief_WS_AsyncProxyEx.EndUpdate(const aRequest: IROAsyncRequest): WideString_Optional;
var
  lResult: WideString_Optional;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('UpdateResult', System.TypeInfo(WideString_Optional), lResult, []);
  result := lResult;
  exit;
end;

function TQAdmixtureDataBrief_WS_AsyncProxyEx.EndUpdateList(const aRequest: IROAsyncRequest): WideString_Optional;
var
  lResult: WideString_Optional;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('UpdateListResult', System.TypeInfo(WideString_Optional), lResult, []);
  result := lResult;
  exit;
end;

function TQAdmixtureDataBrief_WS_AsyncProxyEx.EndRetrieveList(const aRequest: IROAsyncRequest): UnicodeString;
var
  lResult: UnicodeString;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('RetrieveListResult', System.TypeInfo(UnicodeString), lResult, []);
  result := lResult;
  exit;
end;

function TQAdmixtureDataBrief_WS_AsyncProxyEx.EndRetrieveListByPaging(const aRequest: IROAsyncRequest): WideString_Optional;
var
  lResult: WideString_Optional;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('RetrieveListByPagingResult', System.TypeInfo(WideString_Optional), lResult, []);
  result := lResult;
  exit;
end;

function TQAdmixtureDataBrief_WS_AsyncProxyEx.EndIsExists(const aRequest: IROAsyncRequest): WideString_Optional;
var
  lResult: WideString_Optional;
begin
  aRequest.ReadResponse();
  aRequest.Message.Read('IsExistsResult', System.TypeInfo(WideString_Optional), lResult, []);
  result := lResult;
  exit;
end;

initialization
  RegisterProxyClass(IQAdmixtureDataBrief_WS_IID, TQAdmixtureDataBrief_WS_Proxy);
finalization
  UnregisterProxyClass(IQAdmixtureDataBrief_WS_IID);
end.
